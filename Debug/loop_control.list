
loop_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001624  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080017c4  080017c4  000117c4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080017ec  080017ec  000117ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080017f4  080017f4  000117f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080017f8  080017f8  000117f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000008  20000000  080017fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000016c  20000008  08001804  00020008  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000174  08001804  00020174  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ac42  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003577  00000000  00000000  0003ac7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000811a  00000000  00000000  0003e1f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000c90  00000000  00000000  00046310  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000f80  00000000  00000000  00046fa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00006962  00000000  00000000  00047f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004d42  00000000  00000000  0004e882  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000535c4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002408  00000000  00000000  00053640  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000008 	.word	0x20000008
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080017ac 	.word	0x080017ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000000c 	.word	0x2000000c
 80001dc:	080017ac 	.word	0x080017ac

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b97a 	b.w	80004ec <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	468c      	mov	ip, r1
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	9e08      	ldr	r6, [sp, #32]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d151      	bne.n	80002c4 <__udivmoddi4+0xb4>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d96d      	bls.n	8000302 <__udivmoddi4+0xf2>
 8000226:	fab2 fe82 	clz	lr, r2
 800022a:	f1be 0f00 	cmp.w	lr, #0
 800022e:	d00b      	beq.n	8000248 <__udivmoddi4+0x38>
 8000230:	f1ce 0c20 	rsb	ip, lr, #32
 8000234:	fa01 f50e 	lsl.w	r5, r1, lr
 8000238:	fa20 fc0c 	lsr.w	ip, r0, ip
 800023c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000240:	ea4c 0c05 	orr.w	ip, ip, r5
 8000244:	fa00 f40e 	lsl.w	r4, r0, lr
 8000248:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800024c:	0c25      	lsrs	r5, r4, #16
 800024e:	fbbc f8fa 	udiv	r8, ip, sl
 8000252:	fa1f f987 	uxth.w	r9, r7
 8000256:	fb0a cc18 	mls	ip, sl, r8, ip
 800025a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800025e:	fb08 f309 	mul.w	r3, r8, r9
 8000262:	42ab      	cmp	r3, r5
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x6c>
 8000266:	19ed      	adds	r5, r5, r7
 8000268:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800026c:	f080 8123 	bcs.w	80004b6 <__udivmoddi4+0x2a6>
 8000270:	42ab      	cmp	r3, r5
 8000272:	f240 8120 	bls.w	80004b6 <__udivmoddi4+0x2a6>
 8000276:	f1a8 0802 	sub.w	r8, r8, #2
 800027a:	443d      	add	r5, r7
 800027c:	1aed      	subs	r5, r5, r3
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb5 f0fa 	udiv	r0, r5, sl
 8000284:	fb0a 5510 	mls	r5, sl, r0, r5
 8000288:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800028c:	fb00 f909 	mul.w	r9, r0, r9
 8000290:	45a1      	cmp	r9, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x98>
 8000294:	19e4      	adds	r4, r4, r7
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800029a:	f080 810a 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 800029e:	45a1      	cmp	r9, r4
 80002a0:	f240 8107 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	eba4 0409 	sub.w	r4, r4, r9
 80002ac:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002b0:	2100      	movs	r1, #0
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	d061      	beq.n	800037a <__udivmoddi4+0x16a>
 80002b6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ba:	2300      	movs	r3, #0
 80002bc:	6034      	str	r4, [r6, #0]
 80002be:	6073      	str	r3, [r6, #4]
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d907      	bls.n	80002d8 <__udivmoddi4+0xc8>
 80002c8:	2e00      	cmp	r6, #0
 80002ca:	d054      	beq.n	8000376 <__udivmoddi4+0x166>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e886 0021 	stmia.w	r6, {r0, r5}
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	f040 808e 	bne.w	80003fe <__udivmoddi4+0x1ee>
 80002e2:	42ab      	cmp	r3, r5
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xdc>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2d0>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb65 0503 	sbc.w	r5, r5, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	46ac      	mov	ip, r5
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d03f      	beq.n	800037a <__udivmoddi4+0x16a>
 80002fa:	e886 1010 	stmia.w	r6, {r4, ip}
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	b912      	cbnz	r2, 800030a <__udivmoddi4+0xfa>
 8000304:	2701      	movs	r7, #1
 8000306:	fbb7 f7f2 	udiv	r7, r7, r2
 800030a:	fab7 fe87 	clz	lr, r7
 800030e:	f1be 0f00 	cmp.w	lr, #0
 8000312:	d134      	bne.n	800037e <__udivmoddi4+0x16e>
 8000314:	1beb      	subs	r3, r5, r7
 8000316:	0c3a      	lsrs	r2, r7, #16
 8000318:	fa1f fc87 	uxth.w	ip, r7
 800031c:	2101      	movs	r1, #1
 800031e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000322:	0c25      	lsrs	r5, r4, #16
 8000324:	fb02 3318 	mls	r3, r2, r8, r3
 8000328:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800032c:	fb0c f308 	mul.w	r3, ip, r8
 8000330:	42ab      	cmp	r3, r5
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x134>
 8000334:	19ed      	adds	r5, r5, r7
 8000336:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x132>
 800033c:	42ab      	cmp	r3, r5
 800033e:	f200 80d1 	bhi.w	80004e4 <__udivmoddi4+0x2d4>
 8000342:	4680      	mov	r8, r0
 8000344:	1aed      	subs	r5, r5, r3
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb5 f0f2 	udiv	r0, r5, r2
 800034c:	fb02 5510 	mls	r5, r2, r0, r5
 8000350:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000354:	fb0c fc00 	mul.w	ip, ip, r0
 8000358:	45a4      	cmp	ip, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x15c>
 800035c:	19e4      	adds	r4, r4, r7
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x15a>
 8000364:	45a4      	cmp	ip, r4
 8000366:	f200 80b8 	bhi.w	80004da <__udivmoddi4+0x2ca>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 040c 	sub.w	r4, r4, ip
 8000370:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000374:	e79d      	b.n	80002b2 <__udivmoddi4+0xa2>
 8000376:	4631      	mov	r1, r6
 8000378:	4630      	mov	r0, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	f1ce 0420 	rsb	r4, lr, #32
 8000382:	fa05 f30e 	lsl.w	r3, r5, lr
 8000386:	fa07 f70e 	lsl.w	r7, r7, lr
 800038a:	fa20 f804 	lsr.w	r8, r0, r4
 800038e:	0c3a      	lsrs	r2, r7, #16
 8000390:	fa25 f404 	lsr.w	r4, r5, r4
 8000394:	ea48 0803 	orr.w	r8, r8, r3
 8000398:	fbb4 f1f2 	udiv	r1, r4, r2
 800039c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003a0:	fb02 4411 	mls	r4, r2, r1, r4
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003ac:	fb01 f30c 	mul.w	r3, r1, ip
 80003b0:	42ab      	cmp	r3, r5
 80003b2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x1bc>
 80003b8:	19ed      	adds	r5, r5, r7
 80003ba:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003be:	f080 808a 	bcs.w	80004d6 <__udivmoddi4+0x2c6>
 80003c2:	42ab      	cmp	r3, r5
 80003c4:	f240 8087 	bls.w	80004d6 <__udivmoddi4+0x2c6>
 80003c8:	3902      	subs	r1, #2
 80003ca:	443d      	add	r5, r7
 80003cc:	1aeb      	subs	r3, r5, r3
 80003ce:	fa1f f588 	uxth.w	r5, r8
 80003d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003d6:	fb02 3310 	mls	r3, r2, r0, r3
 80003da:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003de:	fb00 f30c 	mul.w	r3, r0, ip
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	d907      	bls.n	80003f6 <__udivmoddi4+0x1e6>
 80003e6:	19ed      	adds	r5, r5, r7
 80003e8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003ec:	d26f      	bcs.n	80004ce <__udivmoddi4+0x2be>
 80003ee:	42ab      	cmp	r3, r5
 80003f0:	d96d      	bls.n	80004ce <__udivmoddi4+0x2be>
 80003f2:	3802      	subs	r0, #2
 80003f4:	443d      	add	r5, r7
 80003f6:	1aeb      	subs	r3, r5, r3
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	e78f      	b.n	800031e <__udivmoddi4+0x10e>
 80003fe:	f1c1 0720 	rsb	r7, r1, #32
 8000402:	fa22 f807 	lsr.w	r8, r2, r7
 8000406:	408b      	lsls	r3, r1
 8000408:	fa05 f401 	lsl.w	r4, r5, r1
 800040c:	ea48 0303 	orr.w	r3, r8, r3
 8000410:	fa20 fe07 	lsr.w	lr, r0, r7
 8000414:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000418:	40fd      	lsrs	r5, r7
 800041a:	ea4e 0e04 	orr.w	lr, lr, r4
 800041e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000422:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000426:	fb0c 5519 	mls	r5, ip, r9, r5
 800042a:	fa1f f883 	uxth.w	r8, r3
 800042e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000432:	fb09 f408 	mul.w	r4, r9, r8
 8000436:	42ac      	cmp	r4, r5
 8000438:	fa02 f201 	lsl.w	r2, r2, r1
 800043c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x244>
 8000442:	18ed      	adds	r5, r5, r3
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000448:	d243      	bcs.n	80004d2 <__udivmoddi4+0x2c2>
 800044a:	42ac      	cmp	r4, r5
 800044c:	d941      	bls.n	80004d2 <__udivmoddi4+0x2c2>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	441d      	add	r5, r3
 8000454:	1b2d      	subs	r5, r5, r4
 8000456:	fa1f fe8e 	uxth.w	lr, lr
 800045a:	fbb5 f0fc 	udiv	r0, r5, ip
 800045e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000462:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45a0      	cmp	r8, r4
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x26e>
 800046e:	18e4      	adds	r4, r4, r3
 8000470:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000474:	d229      	bcs.n	80004ca <__udivmoddi4+0x2ba>
 8000476:	45a0      	cmp	r8, r4
 8000478:	d927      	bls.n	80004ca <__udivmoddi4+0x2ba>
 800047a:	3802      	subs	r0, #2
 800047c:	441c      	add	r4, r3
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba4 0408 	sub.w	r4, r4, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454c      	cmp	r4, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	464d      	mov	r5, r9
 8000490:	d315      	bcc.n	80004be <__udivmoddi4+0x2ae>
 8000492:	d012      	beq.n	80004ba <__udivmoddi4+0x2aa>
 8000494:	b156      	cbz	r6, 80004ac <__udivmoddi4+0x29c>
 8000496:	ebba 030e 	subs.w	r3, sl, lr
 800049a:	eb64 0405 	sbc.w	r4, r4, r5
 800049e:	fa04 f707 	lsl.w	r7, r4, r7
 80004a2:	40cb      	lsrs	r3, r1
 80004a4:	431f      	orrs	r7, r3
 80004a6:	40cc      	lsrs	r4, r1
 80004a8:	6037      	str	r7, [r6, #0]
 80004aa:	6074      	str	r4, [r6, #4]
 80004ac:	2100      	movs	r1, #0
 80004ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b2:	4618      	mov	r0, r3
 80004b4:	e6f8      	b.n	80002a8 <__udivmoddi4+0x98>
 80004b6:	4690      	mov	r8, r2
 80004b8:	e6e0      	b.n	800027c <__udivmoddi4+0x6c>
 80004ba:	45c2      	cmp	sl, r8
 80004bc:	d2ea      	bcs.n	8000494 <__udivmoddi4+0x284>
 80004be:	ebb8 0e02 	subs.w	lr, r8, r2
 80004c2:	eb69 0503 	sbc.w	r5, r9, r3
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7e4      	b.n	8000494 <__udivmoddi4+0x284>
 80004ca:	4628      	mov	r0, r5
 80004cc:	e7d7      	b.n	800047e <__udivmoddi4+0x26e>
 80004ce:	4640      	mov	r0, r8
 80004d0:	e791      	b.n	80003f6 <__udivmoddi4+0x1e6>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e7be      	b.n	8000454 <__udivmoddi4+0x244>
 80004d6:	4601      	mov	r1, r0
 80004d8:	e778      	b.n	80003cc <__udivmoddi4+0x1bc>
 80004da:	3802      	subs	r0, #2
 80004dc:	443c      	add	r4, r7
 80004de:	e745      	b.n	800036c <__udivmoddi4+0x15c>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xe6>
 80004e4:	f1a8 0802 	sub.w	r8, r8, #2
 80004e8:	443d      	add	r5, r7
 80004ea:	e72b      	b.n	8000344 <__udivmoddi4+0x134>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004f0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004f2:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <HAL_Init+0x30>)
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80004fa:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004fc:	681a      	ldr	r2, [r3, #0]
 80004fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000502:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800050a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 f81b 	bl	8000548 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000512:	2000      	movs	r0, #0
 8000514:	f001 f892 	bl	800163c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000518:	f001 f860 	bl	80015dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800051c:	2000      	movs	r0, #0
 800051e:	bd08      	pop	{r3, pc}
 8000520:	40023c00 	.word	0x40023c00

08000524 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000524:	4a03      	ldr	r2, [pc, #12]	; (8000534 <HAL_IncTick+0x10>)
 8000526:	4b04      	ldr	r3, [pc, #16]	; (8000538 <HAL_IncTick+0x14>)
 8000528:	6811      	ldr	r1, [r2, #0]
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	440b      	add	r3, r1
 800052e:	6013      	str	r3, [r2, #0]
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	200000dc 	.word	0x200000dc
 8000538:	20000000 	.word	0x20000000

0800053c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800053c:	4b01      	ldr	r3, [pc, #4]	; (8000544 <HAL_GetTick+0x8>)
 800053e:	6818      	ldr	r0, [r3, #0]
}
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	200000dc 	.word	0x200000dc

08000548 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000548:	4a07      	ldr	r2, [pc, #28]	; (8000568 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800054a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800054c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000550:	041b      	lsls	r3, r3, #16
 8000552:	0c1b      	lsrs	r3, r3, #16
 8000554:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000558:	0200      	lsls	r0, r0, #8
 800055a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800055e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000562:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000564:	60d3      	str	r3, [r2, #12]
 8000566:	4770      	bx	lr
 8000568:	e000ed00 	.word	0xe000ed00

0800056c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800056c:	4b17      	ldr	r3, [pc, #92]	; (80005cc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	68dc      	ldr	r4, [r3, #12]
 8000572:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000576:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800057a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800057c:	2b04      	cmp	r3, #4
 800057e:	bf28      	it	cs
 8000580:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000582:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000584:	f04f 0501 	mov.w	r5, #1
 8000588:	fa05 f303 	lsl.w	r3, r5, r3
 800058c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000590:	bf8c      	ite	hi
 8000592:	3c03      	subhi	r4, #3
 8000594:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000596:	4019      	ands	r1, r3
 8000598:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800059a:	fa05 f404 	lsl.w	r4, r5, r4
 800059e:	3c01      	subs	r4, #1
 80005a0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80005a2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005a4:	ea42 0201 	orr.w	r2, r2, r1
 80005a8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ac:	bfaf      	iteee	ge
 80005ae:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b2:	f000 000f 	andlt.w	r0, r0, #15
 80005b6:	4b06      	ldrlt	r3, [pc, #24]	; (80005d0 <HAL_NVIC_SetPriority+0x64>)
 80005b8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ba:	bfa5      	ittet	ge
 80005bc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80005c0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80005c8:	bd30      	pop	{r4, r5, pc}
 80005ca:	bf00      	nop
 80005cc:	e000ed00 	.word	0xe000ed00
 80005d0:	e000ed14 	.word	0xe000ed14

080005d4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80005d4:	0942      	lsrs	r2, r0, #5
 80005d6:	2301      	movs	r3, #1
 80005d8:	f000 001f 	and.w	r0, r0, #31
 80005dc:	fa03 f000 	lsl.w	r0, r3, r0
 80005e0:	4b01      	ldr	r3, [pc, #4]	; (80005e8 <HAL_NVIC_EnableIRQ+0x14>)
 80005e2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80005e6:	4770      	bx	lr
 80005e8:	e000e100 	.word	0xe000e100

080005ec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005ec:	3801      	subs	r0, #1
 80005ee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005f2:	d20a      	bcs.n	800060a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005f4:	4b06      	ldr	r3, [pc, #24]	; (8000610 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f6:	4a07      	ldr	r2, [pc, #28]	; (8000614 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005f8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005fa:	21f0      	movs	r1, #240	; 0xf0
 80005fc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000600:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000602:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000604:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800060a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	e000e010 	.word	0xe000e010
 8000614:	e000ed00 	.word	0xe000ed00

08000618 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000618:	4b04      	ldr	r3, [pc, #16]	; (800062c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800061a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800061c:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800061e:	bf0c      	ite	eq
 8000620:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000624:	f022 0204 	bicne.w	r2, r2, #4
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	4770      	bx	lr
 800062c:	e000e010 	.word	0xe000e010

08000630 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000634:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000636:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000638:	f8df 819c 	ldr.w	r8, [pc, #412]	; 80007d8 <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800063c:	4a64      	ldr	r2, [pc, #400]	; (80007d0 <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800063e:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8000640:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000644:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000646:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000648:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800064c:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 8000650:	42b7      	cmp	r7, r6
 8000652:	f040 80ad 	bne.w	80007b0 <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000656:	684c      	ldr	r4, [r1, #4]
 8000658:	f024 0a10 	bic.w	sl, r4, #16
 800065c:	f1ba 0f02 	cmp.w	sl, #2
 8000660:	d116      	bne.n	8000690 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 8000662:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8000666:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800066a:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800066e:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000672:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000676:	f04f 0e0f 	mov.w	lr, #15
 800067a:	fa0e fe0b 	lsl.w	lr, lr, fp
 800067e:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000682:	690d      	ldr	r5, [r1, #16]
 8000684:	fa05 f50b 	lsl.w	r5, r5, fp
 8000688:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 800068c:	f8cc 5020 	str.w	r5, [ip, #32]
 8000690:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000694:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000696:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800069a:	fa05 f50c 	lsl.w	r5, r5, ip
 800069e:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006a0:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006a4:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006a8:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006ac:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006b0:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006b4:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006b8:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 80006ba:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006be:	d815      	bhi.n	80006ec <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 80006c0:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80006c4:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 80006c8:	68cd      	ldr	r5, [r1, #12]
 80006ca:	fa05 fa0c 	lsl.w	sl, r5, ip
 80006ce:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 80006d2:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 80006d6:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006da:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006de:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 80006e2:	fa0e fe03 	lsl.w	lr, lr, r3
 80006e6:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 80006ea:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80006ec:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006ee:	9d00      	ldr	r5, [sp, #0]
 80006f0:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80006f2:	688f      	ldr	r7, [r1, #8]
 80006f4:	fa07 f70c 	lsl.w	r7, r7, ip
 80006f8:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80006fa:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006fc:	00e5      	lsls	r5, r4, #3
 80006fe:	d557      	bpl.n	80007b0 <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000700:	f04f 0b00 	mov.w	fp, #0
 8000704:	f8cd b00c 	str.w	fp, [sp, #12]
 8000708:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800070c:	4d31      	ldr	r5, [pc, #196]	; (80007d4 <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800070e:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000712:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000716:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800071a:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800071e:	9703      	str	r7, [sp, #12]
 8000720:	9f03      	ldr	r7, [sp, #12]
 8000722:	f023 0703 	bic.w	r7, r3, #3
 8000726:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800072a:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800072e:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000732:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000736:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800073a:	f04f 0e0f 	mov.w	lr, #15
 800073e:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000742:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000744:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000748:	d039      	beq.n	80007be <HAL_GPIO_Init+0x18e>
 800074a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800074e:	42a8      	cmp	r0, r5
 8000750:	d037      	beq.n	80007c2 <HAL_GPIO_Init+0x192>
 8000752:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000756:	42a8      	cmp	r0, r5
 8000758:	d035      	beq.n	80007c6 <HAL_GPIO_Init+0x196>
 800075a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800075e:	42a8      	cmp	r0, r5
 8000760:	d033      	beq.n	80007ca <HAL_GPIO_Init+0x19a>
 8000762:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000766:	42a8      	cmp	r0, r5
 8000768:	bf14      	ite	ne
 800076a:	2507      	movne	r5, #7
 800076c:	2504      	moveq	r5, #4
 800076e:	fa05 f50c 	lsl.w	r5, r5, ip
 8000772:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000776:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000778:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800077a:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800077c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000780:	bf0c      	ite	eq
 8000782:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000784:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000786:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000788:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800078a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800078e:	bf0c      	ite	eq
 8000790:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000792:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000794:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000796:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000798:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800079c:	bf0c      	ite	eq
 800079e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007a0:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80007a2:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80007a4:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007a6:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80007a8:	bf54      	ite	pl
 80007aa:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80007ac:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80007ae:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007b0:	3301      	adds	r3, #1
 80007b2:	2b10      	cmp	r3, #16
 80007b4:	f47f af47 	bne.w	8000646 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80007b8:	b005      	add	sp, #20
 80007ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007be:	465d      	mov	r5, fp
 80007c0:	e7d5      	b.n	800076e <HAL_GPIO_Init+0x13e>
 80007c2:	2501      	movs	r5, #1
 80007c4:	e7d3      	b.n	800076e <HAL_GPIO_Init+0x13e>
 80007c6:	2502      	movs	r5, #2
 80007c8:	e7d1      	b.n	800076e <HAL_GPIO_Init+0x13e>
 80007ca:	2503      	movs	r5, #3
 80007cc:	e7cf      	b.n	800076e <HAL_GPIO_Init+0x13e>
 80007ce:	bf00      	nop
 80007d0:	40013c00 	.word	0x40013c00
 80007d4:	40020000 	.word	0x40020000
 80007d8:	40023800 	.word	0x40023800

080007dc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80007dc:	b10a      	cbz	r2, 80007e2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80007de:	6181      	str	r1, [r0, #24]
 80007e0:	4770      	bx	lr
 80007e2:	0409      	lsls	r1, r1, #16
 80007e4:	e7fb      	b.n	80007de <HAL_GPIO_WritePin+0x2>
	...

080007e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80007ec:	4604      	mov	r4, r0
 80007ee:	b918      	cbnz	r0, 80007f8 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80007f0:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80007f2:	b002      	add	sp, #8
 80007f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007f8:	6803      	ldr	r3, [r0, #0]
 80007fa:	07dd      	lsls	r5, r3, #31
 80007fc:	d410      	bmi.n	8000820 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80007fe:	6823      	ldr	r3, [r4, #0]
 8000800:	0798      	lsls	r0, r3, #30
 8000802:	d458      	bmi.n	80008b6 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000804:	6823      	ldr	r3, [r4, #0]
 8000806:	071a      	lsls	r2, r3, #28
 8000808:	f100 809a 	bmi.w	8000940 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800080c:	6823      	ldr	r3, [r4, #0]
 800080e:	075b      	lsls	r3, r3, #29
 8000810:	f100 80b8 	bmi.w	8000984 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000814:	69a2      	ldr	r2, [r4, #24]
 8000816:	2a00      	cmp	r2, #0
 8000818:	f040 8119 	bne.w	8000a4e <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 800081c:	2000      	movs	r0, #0
 800081e:	e7e8      	b.n	80007f2 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000820:	4ba6      	ldr	r3, [pc, #664]	; (8000abc <HAL_RCC_OscConfig+0x2d4>)
 8000822:	689a      	ldr	r2, [r3, #8]
 8000824:	f002 020c 	and.w	r2, r2, #12
 8000828:	2a04      	cmp	r2, #4
 800082a:	d007      	beq.n	800083c <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800082c:	689a      	ldr	r2, [r3, #8]
 800082e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000832:	2a08      	cmp	r2, #8
 8000834:	d10a      	bne.n	800084c <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	0259      	lsls	r1, r3, #9
 800083a:	d507      	bpl.n	800084c <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800083c:	4b9f      	ldr	r3, [pc, #636]	; (8000abc <HAL_RCC_OscConfig+0x2d4>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	039a      	lsls	r2, r3, #14
 8000842:	d5dc      	bpl.n	80007fe <HAL_RCC_OscConfig+0x16>
 8000844:	6863      	ldr	r3, [r4, #4]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d1d9      	bne.n	80007fe <HAL_RCC_OscConfig+0x16>
 800084a:	e7d1      	b.n	80007f0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800084c:	6863      	ldr	r3, [r4, #4]
 800084e:	4d9b      	ldr	r5, [pc, #620]	; (8000abc <HAL_RCC_OscConfig+0x2d4>)
 8000850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000854:	d111      	bne.n	800087a <HAL_RCC_OscConfig+0x92>
 8000856:	682b      	ldr	r3, [r5, #0]
 8000858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800085c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800085e:	f7ff fe6d 	bl	800053c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000862:	4d96      	ldr	r5, [pc, #600]	; (8000abc <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000864:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000866:	682b      	ldr	r3, [r5, #0]
 8000868:	039b      	lsls	r3, r3, #14
 800086a:	d4c8      	bmi.n	80007fe <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800086c:	f7ff fe66 	bl	800053c <HAL_GetTick>
 8000870:	1b80      	subs	r0, r0, r6
 8000872:	2864      	cmp	r0, #100	; 0x64
 8000874:	d9f7      	bls.n	8000866 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8000876:	2003      	movs	r0, #3
 8000878:	e7bb      	b.n	80007f2 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800087a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800087e:	d104      	bne.n	800088a <HAL_RCC_OscConfig+0xa2>
 8000880:	682b      	ldr	r3, [r5, #0]
 8000882:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000886:	602b      	str	r3, [r5, #0]
 8000888:	e7e5      	b.n	8000856 <HAL_RCC_OscConfig+0x6e>
 800088a:	682a      	ldr	r2, [r5, #0]
 800088c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000890:	602a      	str	r2, [r5, #0]
 8000892:	682a      	ldr	r2, [r5, #0]
 8000894:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000898:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800089a:	2b00      	cmp	r3, #0
 800089c:	d1df      	bne.n	800085e <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 800089e:	f7ff fe4d 	bl	800053c <HAL_GetTick>
 80008a2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008a4:	682b      	ldr	r3, [r5, #0]
 80008a6:	039f      	lsls	r7, r3, #14
 80008a8:	d5a9      	bpl.n	80007fe <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008aa:	f7ff fe47 	bl	800053c <HAL_GetTick>
 80008ae:	1b80      	subs	r0, r0, r6
 80008b0:	2864      	cmp	r0, #100	; 0x64
 80008b2:	d9f7      	bls.n	80008a4 <HAL_RCC_OscConfig+0xbc>
 80008b4:	e7df      	b.n	8000876 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80008b6:	4b81      	ldr	r3, [pc, #516]	; (8000abc <HAL_RCC_OscConfig+0x2d4>)
 80008b8:	689a      	ldr	r2, [r3, #8]
 80008ba:	f012 0f0c 	tst.w	r2, #12
 80008be:	d007      	beq.n	80008d0 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80008c0:	689a      	ldr	r2, [r3, #8]
 80008c2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80008c6:	2a08      	cmp	r2, #8
 80008c8:	d111      	bne.n	80008ee <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	025e      	lsls	r6, r3, #9
 80008ce:	d40e      	bmi.n	80008ee <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008d0:	4b7a      	ldr	r3, [pc, #488]	; (8000abc <HAL_RCC_OscConfig+0x2d4>)
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	0795      	lsls	r5, r2, #30
 80008d6:	d502      	bpl.n	80008de <HAL_RCC_OscConfig+0xf6>
 80008d8:	68e2      	ldr	r2, [r4, #12]
 80008da:	2a01      	cmp	r2, #1
 80008dc:	d188      	bne.n	80007f0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	6921      	ldr	r1, [r4, #16]
 80008e2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80008e6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80008ea:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008ec:	e78a      	b.n	8000804 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80008ee:	68e2      	ldr	r2, [r4, #12]
 80008f0:	4b73      	ldr	r3, [pc, #460]	; (8000ac0 <HAL_RCC_OscConfig+0x2d8>)
 80008f2:	b1b2      	cbz	r2, 8000922 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80008f4:	2201      	movs	r2, #1
 80008f6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80008f8:	f7ff fe20 	bl	800053c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008fc:	4d6f      	ldr	r5, [pc, #444]	; (8000abc <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80008fe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000900:	682b      	ldr	r3, [r5, #0]
 8000902:	0798      	lsls	r0, r3, #30
 8000904:	d507      	bpl.n	8000916 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000906:	682b      	ldr	r3, [r5, #0]
 8000908:	6922      	ldr	r2, [r4, #16]
 800090a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800090e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000912:	602b      	str	r3, [r5, #0]
 8000914:	e776      	b.n	8000804 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000916:	f7ff fe11 	bl	800053c <HAL_GetTick>
 800091a:	1b80      	subs	r0, r0, r6
 800091c:	2802      	cmp	r0, #2
 800091e:	d9ef      	bls.n	8000900 <HAL_RCC_OscConfig+0x118>
 8000920:	e7a9      	b.n	8000876 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8000922:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000924:	f7ff fe0a 	bl	800053c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000928:	4d64      	ldr	r5, [pc, #400]	; (8000abc <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800092a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800092c:	682b      	ldr	r3, [r5, #0]
 800092e:	0799      	lsls	r1, r3, #30
 8000930:	f57f af68 	bpl.w	8000804 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000934:	f7ff fe02 	bl	800053c <HAL_GetTick>
 8000938:	1b80      	subs	r0, r0, r6
 800093a:	2802      	cmp	r0, #2
 800093c:	d9f6      	bls.n	800092c <HAL_RCC_OscConfig+0x144>
 800093e:	e79a      	b.n	8000876 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000940:	6962      	ldr	r2, [r4, #20]
 8000942:	4b60      	ldr	r3, [pc, #384]	; (8000ac4 <HAL_RCC_OscConfig+0x2dc>)
 8000944:	b17a      	cbz	r2, 8000966 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000946:	2201      	movs	r2, #1
 8000948:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800094a:	f7ff fdf7 	bl	800053c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800094e:	4d5b      	ldr	r5, [pc, #364]	; (8000abc <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000950:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000952:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000954:	079f      	lsls	r7, r3, #30
 8000956:	f53f af59 	bmi.w	800080c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800095a:	f7ff fdef 	bl	800053c <HAL_GetTick>
 800095e:	1b80      	subs	r0, r0, r6
 8000960:	2802      	cmp	r0, #2
 8000962:	d9f6      	bls.n	8000952 <HAL_RCC_OscConfig+0x16a>
 8000964:	e787      	b.n	8000876 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000966:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000968:	f7ff fde8 	bl	800053c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800096c:	4d53      	ldr	r5, [pc, #332]	; (8000abc <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800096e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000970:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000972:	0798      	lsls	r0, r3, #30
 8000974:	f57f af4a 	bpl.w	800080c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000978:	f7ff fde0 	bl	800053c <HAL_GetTick>
 800097c:	1b80      	subs	r0, r0, r6
 800097e:	2802      	cmp	r0, #2
 8000980:	d9f6      	bls.n	8000970 <HAL_RCC_OscConfig+0x188>
 8000982:	e778      	b.n	8000876 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000984:	4b4d      	ldr	r3, [pc, #308]	; (8000abc <HAL_RCC_OscConfig+0x2d4>)
 8000986:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000988:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800098c:	d128      	bne.n	80009e0 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800098e:	9201      	str	r2, [sp, #4]
 8000990:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000992:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000996:	641a      	str	r2, [r3, #64]	; 0x40
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099e:	9301      	str	r3, [sp, #4]
 80009a0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80009a2:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009a4:	4d48      	ldr	r5, [pc, #288]	; (8000ac8 <HAL_RCC_OscConfig+0x2e0>)
 80009a6:	682b      	ldr	r3, [r5, #0]
 80009a8:	05d9      	lsls	r1, r3, #23
 80009aa:	d51b      	bpl.n	80009e4 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009ac:	68a3      	ldr	r3, [r4, #8]
 80009ae:	4d43      	ldr	r5, [pc, #268]	; (8000abc <HAL_RCC_OscConfig+0x2d4>)
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d127      	bne.n	8000a04 <HAL_RCC_OscConfig+0x21c>
 80009b4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80009b6:	f043 0301 	orr.w	r3, r3, #1
 80009ba:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80009bc:	f7ff fdbe 	bl	800053c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009c0:	4d3e      	ldr	r5, [pc, #248]	; (8000abc <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80009c2:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80009c4:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009c8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80009ca:	079b      	lsls	r3, r3, #30
 80009cc:	d539      	bpl.n	8000a42 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80009ce:	2e00      	cmp	r6, #0
 80009d0:	f43f af20 	beq.w	8000814 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80009d4:	4a39      	ldr	r2, [pc, #228]	; (8000abc <HAL_RCC_OscConfig+0x2d4>)
 80009d6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80009d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80009dc:	6413      	str	r3, [r2, #64]	; 0x40
 80009de:	e719      	b.n	8000814 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 80009e0:	2600      	movs	r6, #0
 80009e2:	e7df      	b.n	80009a4 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80009e4:	682b      	ldr	r3, [r5, #0]
 80009e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ea:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80009ec:	f7ff fda6 	bl	800053c <HAL_GetTick>
 80009f0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009f2:	682b      	ldr	r3, [r5, #0]
 80009f4:	05da      	lsls	r2, r3, #23
 80009f6:	d4d9      	bmi.n	80009ac <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80009f8:	f7ff fda0 	bl	800053c <HAL_GetTick>
 80009fc:	1bc0      	subs	r0, r0, r7
 80009fe:	2802      	cmp	r0, #2
 8000a00:	d9f7      	bls.n	80009f2 <HAL_RCC_OscConfig+0x20a>
 8000a02:	e738      	b.n	8000876 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a04:	2b05      	cmp	r3, #5
 8000a06:	d104      	bne.n	8000a12 <HAL_RCC_OscConfig+0x22a>
 8000a08:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a0a:	f043 0304 	orr.w	r3, r3, #4
 8000a0e:	672b      	str	r3, [r5, #112]	; 0x70
 8000a10:	e7d0      	b.n	80009b4 <HAL_RCC_OscConfig+0x1cc>
 8000a12:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a14:	f022 0201 	bic.w	r2, r2, #1
 8000a18:	672a      	str	r2, [r5, #112]	; 0x70
 8000a1a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a1c:	f022 0204 	bic.w	r2, r2, #4
 8000a20:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d1ca      	bne.n	80009bc <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000a26:	f7ff fd89 	bl	800053c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a2a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000a2e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a30:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a32:	0798      	lsls	r0, r3, #30
 8000a34:	d5cb      	bpl.n	80009ce <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a36:	f7ff fd81 	bl	800053c <HAL_GetTick>
 8000a3a:	1bc0      	subs	r0, r0, r7
 8000a3c:	4540      	cmp	r0, r8
 8000a3e:	d9f7      	bls.n	8000a30 <HAL_RCC_OscConfig+0x248>
 8000a40:	e719      	b.n	8000876 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a42:	f7ff fd7b 	bl	800053c <HAL_GetTick>
 8000a46:	1bc0      	subs	r0, r0, r7
 8000a48:	4540      	cmp	r0, r8
 8000a4a:	d9bd      	bls.n	80009c8 <HAL_RCC_OscConfig+0x1e0>
 8000a4c:	e713      	b.n	8000876 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000a4e:	4d1b      	ldr	r5, [pc, #108]	; (8000abc <HAL_RCC_OscConfig+0x2d4>)
 8000a50:	68ab      	ldr	r3, [r5, #8]
 8000a52:	f003 030c 	and.w	r3, r3, #12
 8000a56:	2b08      	cmp	r3, #8
 8000a58:	f43f aeca 	beq.w	80007f0 <HAL_RCC_OscConfig+0x8>
 8000a5c:	4e1b      	ldr	r6, [pc, #108]	; (8000acc <HAL_RCC_OscConfig+0x2e4>)
 8000a5e:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a60:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000a62:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a64:	d134      	bne.n	8000ad0 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000a66:	f7ff fd69 	bl	800053c <HAL_GetTick>
 8000a6a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000a6c:	682b      	ldr	r3, [r5, #0]
 8000a6e:	0199      	lsls	r1, r3, #6
 8000a70:	d41e      	bmi.n	8000ab0 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000a72:	6a22      	ldr	r2, [r4, #32]
 8000a74:	69e3      	ldr	r3, [r4, #28]
 8000a76:	4313      	orrs	r3, r2
 8000a78:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000a7a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000a7e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000a80:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000a84:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a86:	4c0d      	ldr	r4, [pc, #52]	; (8000abc <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000a88:	0852      	lsrs	r2, r2, #1
 8000a8a:	3a01      	subs	r2, #1
 8000a8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a90:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000a92:	2301      	movs	r3, #1
 8000a94:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000a96:	f7ff fd51 	bl	800053c <HAL_GetTick>
 8000a9a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a9c:	6823      	ldr	r3, [r4, #0]
 8000a9e:	019a      	lsls	r2, r3, #6
 8000aa0:	f53f aebc 	bmi.w	800081c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000aa4:	f7ff fd4a 	bl	800053c <HAL_GetTick>
 8000aa8:	1b40      	subs	r0, r0, r5
 8000aaa:	2802      	cmp	r0, #2
 8000aac:	d9f6      	bls.n	8000a9c <HAL_RCC_OscConfig+0x2b4>
 8000aae:	e6e2      	b.n	8000876 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ab0:	f7ff fd44 	bl	800053c <HAL_GetTick>
 8000ab4:	1bc0      	subs	r0, r0, r7
 8000ab6:	2802      	cmp	r0, #2
 8000ab8:	d9d8      	bls.n	8000a6c <HAL_RCC_OscConfig+0x284>
 8000aba:	e6dc      	b.n	8000876 <HAL_RCC_OscConfig+0x8e>
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	42470000 	.word	0x42470000
 8000ac4:	42470e80 	.word	0x42470e80
 8000ac8:	40007000 	.word	0x40007000
 8000acc:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000ad0:	f7ff fd34 	bl	800053c <HAL_GetTick>
 8000ad4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ad6:	682b      	ldr	r3, [r5, #0]
 8000ad8:	019b      	lsls	r3, r3, #6
 8000ada:	f57f ae9f 	bpl.w	800081c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ade:	f7ff fd2d 	bl	800053c <HAL_GetTick>
 8000ae2:	1b00      	subs	r0, r0, r4
 8000ae4:	2802      	cmp	r0, #2
 8000ae6:	d9f6      	bls.n	8000ad6 <HAL_RCC_OscConfig+0x2ee>
 8000ae8:	e6c5      	b.n	8000876 <HAL_RCC_OscConfig+0x8e>
 8000aea:	bf00      	nop

08000aec <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000aec:	4913      	ldr	r1, [pc, #76]	; (8000b3c <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000aee:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000af0:	688b      	ldr	r3, [r1, #8]
 8000af2:	f003 030c 	and.w	r3, r3, #12
 8000af6:	2b04      	cmp	r3, #4
 8000af8:	d003      	beq.n	8000b02 <HAL_RCC_GetSysClockFreq+0x16>
 8000afa:	2b08      	cmp	r3, #8
 8000afc:	d003      	beq.n	8000b06 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000afe:	4810      	ldr	r0, [pc, #64]	; (8000b40 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000b00:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000b02:	4810      	ldr	r0, [pc, #64]	; (8000b44 <HAL_RCC_GetSysClockFreq+0x58>)
 8000b04:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b06:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b08:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b0a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b0c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b10:	bf14      	ite	ne
 8000b12:	480c      	ldrne	r0, [pc, #48]	; (8000b44 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b14:	480a      	ldreq	r0, [pc, #40]	; (8000b40 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b16:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000b1a:	bf18      	it	ne
 8000b1c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b1e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b22:	fba1 0100 	umull	r0, r1, r1, r0
 8000b26:	f7ff fb5b 	bl	80001e0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000b2a:	4b04      	ldr	r3, [pc, #16]	; (8000b3c <HAL_RCC_GetSysClockFreq+0x50>)
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000b32:	3301      	adds	r3, #1
 8000b34:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000b36:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b3a:	bd08      	pop	{r3, pc}
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	00f42400 	.word	0x00f42400
 8000b44:	007a1200 	.word	0x007a1200

08000b48 <HAL_RCC_ClockConfig>:
{
 8000b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b4c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000b4e:	4604      	mov	r4, r0
 8000b50:	b910      	cbnz	r0, 8000b58 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000b52:	2001      	movs	r0, #1
 8000b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000b58:	4b44      	ldr	r3, [pc, #272]	; (8000c6c <HAL_RCC_ClockConfig+0x124>)
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	f002 020f 	and.w	r2, r2, #15
 8000b60:	428a      	cmp	r2, r1
 8000b62:	d328      	bcc.n	8000bb6 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b64:	6821      	ldr	r1, [r4, #0]
 8000b66:	078f      	lsls	r7, r1, #30
 8000b68:	d42d      	bmi.n	8000bc6 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000b6a:	07c8      	lsls	r0, r1, #31
 8000b6c:	d440      	bmi.n	8000bf0 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000b6e:	4b3f      	ldr	r3, [pc, #252]	; (8000c6c <HAL_RCC_ClockConfig+0x124>)
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	f002 020f 	and.w	r2, r2, #15
 8000b76:	4295      	cmp	r5, r2
 8000b78:	d366      	bcc.n	8000c48 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b7a:	6822      	ldr	r2, [r4, #0]
 8000b7c:	0751      	lsls	r1, r2, #29
 8000b7e:	d46c      	bmi.n	8000c5a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b80:	0713      	lsls	r3, r2, #28
 8000b82:	d507      	bpl.n	8000b94 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000b84:	4a3a      	ldr	r2, [pc, #232]	; (8000c70 <HAL_RCC_ClockConfig+0x128>)
 8000b86:	6921      	ldr	r1, [r4, #16]
 8000b88:	6893      	ldr	r3, [r2, #8]
 8000b8a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000b8e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000b92:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000b94:	f7ff ffaa 	bl	8000aec <HAL_RCC_GetSysClockFreq>
 8000b98:	4b35      	ldr	r3, [pc, #212]	; (8000c70 <HAL_RCC_ClockConfig+0x128>)
 8000b9a:	4a36      	ldr	r2, [pc, #216]	; (8000c74 <HAL_RCC_ClockConfig+0x12c>)
 8000b9c:	689b      	ldr	r3, [r3, #8]
 8000b9e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000ba2:	5cd3      	ldrb	r3, [r2, r3]
 8000ba4:	40d8      	lsrs	r0, r3
 8000ba6:	4b34      	ldr	r3, [pc, #208]	; (8000c78 <HAL_RCC_ClockConfig+0x130>)
 8000ba8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000baa:	2000      	movs	r0, #0
 8000bac:	f000 fd46 	bl	800163c <HAL_InitTick>
  return HAL_OK;
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bb6:	b2ca      	uxtb	r2, r1
 8000bb8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f003 030f 	and.w	r3, r3, #15
 8000bc0:	4299      	cmp	r1, r3
 8000bc2:	d1c6      	bne.n	8000b52 <HAL_RCC_ClockConfig+0xa>
 8000bc4:	e7ce      	b.n	8000b64 <HAL_RCC_ClockConfig+0x1c>
 8000bc6:	4b2a      	ldr	r3, [pc, #168]	; (8000c70 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000bc8:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000bcc:	bf1e      	ittt	ne
 8000bce:	689a      	ldrne	r2, [r3, #8]
 8000bd0:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000bd4:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000bd6:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000bd8:	bf42      	ittt	mi
 8000bda:	689a      	ldrmi	r2, [r3, #8]
 8000bdc:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000be0:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000be2:	689a      	ldr	r2, [r3, #8]
 8000be4:	68a0      	ldr	r0, [r4, #8]
 8000be6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000bea:	4302      	orrs	r2, r0
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	e7bc      	b.n	8000b6a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000bf0:	6862      	ldr	r2, [r4, #4]
 8000bf2:	4b1f      	ldr	r3, [pc, #124]	; (8000c70 <HAL_RCC_ClockConfig+0x128>)
 8000bf4:	2a01      	cmp	r2, #1
 8000bf6:	d11d      	bne.n	8000c34 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bfe:	d0a8      	beq.n	8000b52 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c00:	4e1b      	ldr	r6, [pc, #108]	; (8000c70 <HAL_RCC_ClockConfig+0x128>)
 8000c02:	68b3      	ldr	r3, [r6, #8]
 8000c04:	f023 0303 	bic.w	r3, r3, #3
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000c0c:	f7ff fc96 	bl	800053c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c10:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000c14:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c16:	68b3      	ldr	r3, [r6, #8]
 8000c18:	6862      	ldr	r2, [r4, #4]
 8000c1a:	f003 030c 	and.w	r3, r3, #12
 8000c1e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000c22:	d0a4      	beq.n	8000b6e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c24:	f7ff fc8a 	bl	800053c <HAL_GetTick>
 8000c28:	1bc0      	subs	r0, r0, r7
 8000c2a:	4540      	cmp	r0, r8
 8000c2c:	d9f3      	bls.n	8000c16 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000c2e:	2003      	movs	r0, #3
}
 8000c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c34:	1e91      	subs	r1, r2, #2
 8000c36:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c38:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c3a:	d802      	bhi.n	8000c42 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c3c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000c40:	e7dd      	b.n	8000bfe <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c42:	f013 0f02 	tst.w	r3, #2
 8000c46:	e7da      	b.n	8000bfe <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c48:	b2ea      	uxtb	r2, r5
 8000c4a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f003 030f 	and.w	r3, r3, #15
 8000c52:	429d      	cmp	r5, r3
 8000c54:	f47f af7d 	bne.w	8000b52 <HAL_RCC_ClockConfig+0xa>
 8000c58:	e78f      	b.n	8000b7a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c5a:	4905      	ldr	r1, [pc, #20]	; (8000c70 <HAL_RCC_ClockConfig+0x128>)
 8000c5c:	68e0      	ldr	r0, [r4, #12]
 8000c5e:	688b      	ldr	r3, [r1, #8]
 8000c60:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000c64:	4303      	orrs	r3, r0
 8000c66:	608b      	str	r3, [r1, #8]
 8000c68:	e78a      	b.n	8000b80 <HAL_RCC_ClockConfig+0x38>
 8000c6a:	bf00      	nop
 8000c6c:	40023c00 	.word	0x40023c00
 8000c70:	40023800 	.word	0x40023800
 8000c74:	080017d1 	.word	0x080017d1
 8000c78:	20000004 	.word	0x20000004

08000c7c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000c7c:	4b01      	ldr	r3, [pc, #4]	; (8000c84 <HAL_RCC_GetHCLKFreq+0x8>)
 8000c7e:	6818      	ldr	r0, [r3, #0]
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	20000004 	.word	0x20000004

08000c88 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000c88:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <HAL_RCC_GetPCLK2Freq+0x14>)
 8000c8a:	4a05      	ldr	r2, [pc, #20]	; (8000ca0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000c92:	5cd3      	ldrb	r3, [r2, r3]
 8000c94:	4a03      	ldr	r2, [pc, #12]	; (8000ca4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000c96:	6810      	ldr	r0, [r2, #0]
}
 8000c98:	40d8      	lsrs	r0, r3
 8000c9a:	4770      	bx	lr
 8000c9c:	40023800 	.word	0x40023800
 8000ca0:	080017e1 	.word	0x080017e1
 8000ca4:	20000004 	.word	0x20000004

08000ca8 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000ca8:	230f      	movs	r3, #15
 8000caa:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000cac:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <HAL_RCC_GetClockConfig+0x34>)
 8000cae:	689a      	ldr	r2, [r3, #8]
 8000cb0:	f002 0203 	and.w	r2, r2, #3
 8000cb4:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000cb6:	689a      	ldr	r2, [r3, #8]
 8000cb8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000cbc:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000cbe:	689a      	ldr	r2, [r3, #8]
 8000cc0:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8000cc4:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8000cc6:	689b      	ldr	r3, [r3, #8]
 8000cc8:	08db      	lsrs	r3, r3, #3
 8000cca:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000cce:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000cd0:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <HAL_RCC_GetClockConfig+0x38>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f003 030f 	and.w	r3, r3, #15
 8000cd8:	600b      	str	r3, [r1, #0]
 8000cda:	4770      	bx	lr
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40023c00 	.word	0x40023c00

08000ce4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8000ce4:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8000ce6:	4604      	mov	r4, r0
 8000ce8:	2800      	cmp	r0, #0
 8000cea:	d036      	beq.n	8000d5a <HAL_SPI_Init+0x76>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cec:	2300      	movs	r3, #0
 8000cee:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8000cf0:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000cf4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000cf8:	b91b      	cbnz	r3, 8000d02 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8000cfa:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8000cfe:	f000 fc47 	bl	8001590 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000d02:	6821      	ldr	r1, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000d04:	68a0      	ldr	r0, [r4, #8]
 8000d06:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000d0e:	680b      	ldr	r3, [r1, #0]
 8000d10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d14:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000d16:	6863      	ldr	r3, [r4, #4]
 8000d18:	4303      	orrs	r3, r0
 8000d1a:	68e0      	ldr	r0, [r4, #12]
 8000d1c:	4303      	orrs	r3, r0
 8000d1e:	6920      	ldr	r0, [r4, #16]
 8000d20:	4303      	orrs	r3, r0
 8000d22:	6960      	ldr	r0, [r4, #20]
 8000d24:	4303      	orrs	r3, r0
 8000d26:	69e0      	ldr	r0, [r4, #28]
 8000d28:	4303      	orrs	r3, r0
 8000d2a:	6a20      	ldr	r0, [r4, #32]
 8000d2c:	4303      	orrs	r3, r0
 8000d2e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000d30:	4303      	orrs	r3, r0
 8000d32:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8000d36:	4303      	orrs	r3, r0
 8000d38:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000d3a:	0c12      	lsrs	r2, r2, #16
 8000d3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000d3e:	f002 0204 	and.w	r2, r2, #4
 8000d42:	431a      	orrs	r2, r3
 8000d44:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000d46:	69cb      	ldr	r3, [r1, #28]
 8000d48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000d4c:	61cb      	str	r3, [r1, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000d4e:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8000d50:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000d52:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000d54:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 8000d58:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000d5a:	2001      	movs	r0, #1
}
 8000d5c:	bd10      	pop	{r4, pc}

08000d5e <HAL_TIM_Base_MspInit>:
 8000d5e:	4770      	bx	lr

08000d60 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000d60:	6803      	ldr	r3, [r0, #0]
 8000d62:	68da      	ldr	r2, [r3, #12]
 8000d64:	f042 0201 	orr.w	r2, r2, #1
 8000d68:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	f042 0201 	orr.w	r2, r2, #1
 8000d70:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8000d72:	2000      	movs	r0, #0
 8000d74:	4770      	bx	lr

08000d76 <HAL_TIM_OC_DelayElapsedCallback>:
 8000d76:	4770      	bx	lr

08000d78 <HAL_TIM_IC_CaptureCallback>:
 8000d78:	4770      	bx	lr

08000d7a <HAL_TIM_PWM_PulseFinishedCallback>:
 8000d7a:	4770      	bx	lr

08000d7c <HAL_TIM_TriggerCallback>:
 8000d7c:	4770      	bx	lr

08000d7e <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000d7e:	6803      	ldr	r3, [r0, #0]
 8000d80:	691a      	ldr	r2, [r3, #16]
 8000d82:	0791      	lsls	r1, r2, #30
{
 8000d84:	b510      	push	{r4, lr}
 8000d86:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000d88:	d50e      	bpl.n	8000da8 <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000d8a:	68da      	ldr	r2, [r3, #12]
 8000d8c:	0792      	lsls	r2, r2, #30
 8000d8e:	d50b      	bpl.n	8000da8 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000d90:	f06f 0202 	mvn.w	r2, #2
 8000d94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000d96:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000d98:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000d9a:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000d9c:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000d9e:	d077      	beq.n	8000e90 <HAL_TIM_IRQHandler+0x112>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8000da0:	f7ff ffea 	bl	8000d78 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000da4:	2300      	movs	r3, #0
 8000da6:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000da8:	6823      	ldr	r3, [r4, #0]
 8000daa:	691a      	ldr	r2, [r3, #16]
 8000dac:	0750      	lsls	r0, r2, #29
 8000dae:	d510      	bpl.n	8000dd2 <HAL_TIM_IRQHandler+0x54>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000db0:	68da      	ldr	r2, [r3, #12]
 8000db2:	0751      	lsls	r1, r2, #29
 8000db4:	d50d      	bpl.n	8000dd2 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000db6:	f06f 0204 	mvn.w	r2, #4
 8000dba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000dbc:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000dbe:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000dc0:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000dc4:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000dc6:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000dc8:	d068      	beq.n	8000e9c <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000dca:	f7ff ffd5 	bl	8000d78 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000dd2:	6823      	ldr	r3, [r4, #0]
 8000dd4:	691a      	ldr	r2, [r3, #16]
 8000dd6:	0712      	lsls	r2, r2, #28
 8000dd8:	d50f      	bpl.n	8000dfa <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000dda:	68da      	ldr	r2, [r3, #12]
 8000ddc:	0710      	lsls	r0, r2, #28
 8000dde:	d50c      	bpl.n	8000dfa <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000de0:	f06f 0208 	mvn.w	r2, #8
 8000de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000de6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000de8:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000dea:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000dec:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000dee:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000df0:	d05a      	beq.n	8000ea8 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000df2:	f7ff ffc1 	bl	8000d78 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000df6:	2300      	movs	r3, #0
 8000df8:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000dfa:	6823      	ldr	r3, [r4, #0]
 8000dfc:	691a      	ldr	r2, [r3, #16]
 8000dfe:	06d2      	lsls	r2, r2, #27
 8000e00:	d510      	bpl.n	8000e24 <HAL_TIM_IRQHandler+0xa6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000e02:	68da      	ldr	r2, [r3, #12]
 8000e04:	06d0      	lsls	r0, r2, #27
 8000e06:	d50d      	bpl.n	8000e24 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000e08:	f06f 0210 	mvn.w	r2, #16
 8000e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000e0e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000e10:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000e12:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000e16:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000e18:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000e1a:	d04b      	beq.n	8000eb4 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8000e1c:	f7ff ffac 	bl	8000d78 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e20:	2300      	movs	r3, #0
 8000e22:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000e24:	6823      	ldr	r3, [r4, #0]
 8000e26:	691a      	ldr	r2, [r3, #16]
 8000e28:	07d1      	lsls	r1, r2, #31
 8000e2a:	d508      	bpl.n	8000e3e <HAL_TIM_IRQHandler+0xc0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000e2c:	68da      	ldr	r2, [r3, #12]
 8000e2e:	07d2      	lsls	r2, r2, #31
 8000e30:	d505      	bpl.n	8000e3e <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000e32:	f06f 0201 	mvn.w	r2, #1
 8000e36:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000e38:	4620      	mov	r0, r4
 8000e3a:	f000 fb2d 	bl	8001498 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000e3e:	6823      	ldr	r3, [r4, #0]
 8000e40:	691a      	ldr	r2, [r3, #16]
 8000e42:	0610      	lsls	r0, r2, #24
 8000e44:	d508      	bpl.n	8000e58 <HAL_TIM_IRQHandler+0xda>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000e46:	68da      	ldr	r2, [r3, #12]
 8000e48:	0611      	lsls	r1, r2, #24
 8000e4a:	d505      	bpl.n	8000e58 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000e4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000e50:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000e52:	4620      	mov	r0, r4
 8000e54:	f000 f89d 	bl	8000f92 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000e58:	6823      	ldr	r3, [r4, #0]
 8000e5a:	691a      	ldr	r2, [r3, #16]
 8000e5c:	0652      	lsls	r2, r2, #25
 8000e5e:	d508      	bpl.n	8000e72 <HAL_TIM_IRQHandler+0xf4>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000e60:	68da      	ldr	r2, [r3, #12]
 8000e62:	0650      	lsls	r0, r2, #25
 8000e64:	d505      	bpl.n	8000e72 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000e66:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000e6a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000e6c:	4620      	mov	r0, r4
 8000e6e:	f7ff ff85 	bl	8000d7c <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000e72:	6823      	ldr	r3, [r4, #0]
 8000e74:	691a      	ldr	r2, [r3, #16]
 8000e76:	0691      	lsls	r1, r2, #26
 8000e78:	d522      	bpl.n	8000ec0 <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8000e7a:	68da      	ldr	r2, [r3, #12]
 8000e7c:	0692      	lsls	r2, r2, #26
 8000e7e:	d51f      	bpl.n	8000ec0 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000e80:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8000e84:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000e86:	611a      	str	r2, [r3, #16]
    }
  }
}
 8000e88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8000e8c:	f000 b880 	b.w	8000f90 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e90:	f7ff ff71 	bl	8000d76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e94:	4620      	mov	r0, r4
 8000e96:	f7ff ff70 	bl	8000d7a <HAL_TIM_PWM_PulseFinishedCallback>
 8000e9a:	e783      	b.n	8000da4 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e9c:	f7ff ff6b 	bl	8000d76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000ea0:	4620      	mov	r0, r4
 8000ea2:	f7ff ff6a 	bl	8000d7a <HAL_TIM_PWM_PulseFinishedCallback>
 8000ea6:	e792      	b.n	8000dce <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000ea8:	f7ff ff65 	bl	8000d76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8000eac:	4620      	mov	r0, r4
 8000eae:	f7ff ff64 	bl	8000d7a <HAL_TIM_PWM_PulseFinishedCallback>
 8000eb2:	e7a0      	b.n	8000df6 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000eb4:	f7ff ff5f 	bl	8000d76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000eb8:	4620      	mov	r0, r4
 8000eba:	f7ff ff5e 	bl	8000d7a <HAL_TIM_PWM_PulseFinishedCallback>
 8000ebe:	e7af      	b.n	8000e20 <HAL_TIM_IRQHandler+0xa2>
 8000ec0:	bd10      	pop	{r4, pc}
	...

08000ec4 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000ec4:	4a22      	ldr	r2, [pc, #136]	; (8000f50 <TIM_Base_SetConfig+0x8c>)
  tmpcr1 = TIMx->CR1;
 8000ec6:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000ec8:	4290      	cmp	r0, r2
 8000eca:	d00e      	beq.n	8000eea <TIM_Base_SetConfig+0x26>
 8000ecc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000ed0:	d00b      	beq.n	8000eea <TIM_Base_SetConfig+0x26>
 8000ed2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000ed6:	4290      	cmp	r0, r2
 8000ed8:	d007      	beq.n	8000eea <TIM_Base_SetConfig+0x26>
 8000eda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ede:	4290      	cmp	r0, r2
 8000ee0:	d003      	beq.n	8000eea <TIM_Base_SetConfig+0x26>
 8000ee2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ee6:	4290      	cmp	r0, r2
 8000ee8:	d119      	bne.n	8000f1e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000eea:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000eec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000ef0:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000ef2:	4a17      	ldr	r2, [pc, #92]	; (8000f50 <TIM_Base_SetConfig+0x8c>)
 8000ef4:	4290      	cmp	r0, r2
 8000ef6:	d104      	bne.n	8000f02 <TIM_Base_SetConfig+0x3e>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000ef8:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000efa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000efe:	4313      	orrs	r3, r2
 8000f00:	e018      	b.n	8000f34 <TIM_Base_SetConfig+0x70>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000f02:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000f06:	d0f7      	beq.n	8000ef8 <TIM_Base_SetConfig+0x34>
 8000f08:	4a12      	ldr	r2, [pc, #72]	; (8000f54 <TIM_Base_SetConfig+0x90>)
 8000f0a:	4290      	cmp	r0, r2
 8000f0c:	d0f4      	beq.n	8000ef8 <TIM_Base_SetConfig+0x34>
 8000f0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f12:	4290      	cmp	r0, r2
 8000f14:	d0f0      	beq.n	8000ef8 <TIM_Base_SetConfig+0x34>
 8000f16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f1a:	4290      	cmp	r0, r2
 8000f1c:	d0ec      	beq.n	8000ef8 <TIM_Base_SetConfig+0x34>
 8000f1e:	4a0e      	ldr	r2, [pc, #56]	; (8000f58 <TIM_Base_SetConfig+0x94>)
 8000f20:	4290      	cmp	r0, r2
 8000f22:	d0e9      	beq.n	8000ef8 <TIM_Base_SetConfig+0x34>
 8000f24:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f28:	4290      	cmp	r0, r2
 8000f2a:	d0e5      	beq.n	8000ef8 <TIM_Base_SetConfig+0x34>
 8000f2c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f30:	4290      	cmp	r0, r2
 8000f32:	d0e1      	beq.n	8000ef8 <TIM_Base_SetConfig+0x34>
  }

  TIMx->CR1 = tmpcr1;
 8000f34:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000f36:	688b      	ldr	r3, [r1, #8]
 8000f38:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000f3a:	680b      	ldr	r3, [r1, #0]
 8000f3c:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8000f3e:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <TIM_Base_SetConfig+0x8c>)
 8000f40:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000f42:	bf04      	itt	eq
 8000f44:	690b      	ldreq	r3, [r1, #16]
 8000f46:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	6143      	str	r3, [r0, #20]
}
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	40010000 	.word	0x40010000
 8000f54:	40000400 	.word	0x40000400
 8000f58:	40014000 	.word	0x40014000

08000f5c <HAL_TIM_Base_Init>:
{ 
 8000f5c:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000f5e:	4604      	mov	r4, r0
 8000f60:	b1a0      	cbz	r0, 8000f8c <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000f62:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000f66:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f6a:	b91b      	cbnz	r3, 8000f74 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000f6c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8000f70:	f7ff fef5 	bl	8000d5e <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000f74:	2302      	movs	r3, #2
 8000f76:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8000f7a:	6820      	ldr	r0, [r4, #0]
 8000f7c:	1d21      	adds	r1, r4, #4
 8000f7e:	f7ff ffa1 	bl	8000ec4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000f82:	2301      	movs	r3, #1
 8000f84:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8000f88:	2000      	movs	r0, #0
 8000f8a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000f8c:	2001      	movs	r0, #1
}
 8000f8e:	bd10      	pop	{r4, pc}

08000f90 <HAL_TIMEx_CommutationCallback>:
 8000f90:	4770      	bx	lr

08000f92 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000f92:	4770      	bx	lr

08000f94 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8000f94:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000f96:	f000 f961 	bl	800125c <xTaskGetSchedulerState>
 8000f9a:	2801      	cmp	r0, #1
 8000f9c:	d003      	beq.n	8000fa6 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8000f9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8000fa2:	f000 b867 	b.w	8001074 <xPortSysTickHandler>
 8000fa6:	bd08      	pop	{r3, pc}

08000fa8 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8000fa8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000faa:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000fac:	689a      	ldr	r2, [r3, #8]
 8000fae:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000fb0:	689a      	ldr	r2, [r3, #8]
 8000fb2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000fb4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8000fb6:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000fb8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8000fba:	3301      	adds	r3, #1
 8000fbc:	6003      	str	r3, [r0, #0]
 8000fbe:	4770      	bx	lr

08000fc0 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000fc0:	6841      	ldr	r1, [r0, #4]
 8000fc2:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8000fc4:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000fc6:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000fc8:	6882      	ldr	r2, [r0, #8]
 8000fca:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000fcc:	6859      	ldr	r1, [r3, #4]
 8000fce:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000fd0:	bf08      	it	eq
 8000fd2:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8000fd8:	6818      	ldr	r0, [r3, #0]
 8000fda:	3801      	subs	r0, #1
 8000fdc:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8000fde:	4770      	bx	lr

08000fe0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000fe0:	4b07      	ldr	r3, [pc, #28]	; (8001000 <pxCurrentTCBConst2>)
 8000fe2:	6819      	ldr	r1, [r3, #0]
 8000fe4:	6808      	ldr	r0, [r1, #0]
 8000fe6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fea:	f380 8809 	msr	PSP, r0
 8000fee:	f3bf 8f6f 	isb	sy
 8000ff2:	f04f 0000 	mov.w	r0, #0
 8000ff6:	f380 8811 	msr	BASEPRI, r0
 8000ffa:	4770      	bx	lr
 8000ffc:	f3af 8000 	nop.w

08001000 <pxCurrentTCBConst2>:
 8001000:	20000024 	.word	0x20000024
	...

08001010 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001010:	f3ef 8009 	mrs	r0, PSP
 8001014:	f3bf 8f6f 	isb	sy
 8001018:	4b15      	ldr	r3, [pc, #84]	; (8001070 <pxCurrentTCBConst>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	f01e 0f10 	tst.w	lr, #16
 8001020:	bf08      	it	eq
 8001022:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001026:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800102a:	6010      	str	r0, [r2, #0]
 800102c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8001030:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001034:	f380 8811 	msr	BASEPRI, r0
 8001038:	f3bf 8f4f 	dsb	sy
 800103c:	f3bf 8f6f 	isb	sy
 8001040:	f000 f8d2 	bl	80011e8 <vTaskSwitchContext>
 8001044:	f04f 0000 	mov.w	r0, #0
 8001048:	f380 8811 	msr	BASEPRI, r0
 800104c:	bc08      	pop	{r3}
 800104e:	6819      	ldr	r1, [r3, #0]
 8001050:	6808      	ldr	r0, [r1, #0]
 8001052:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001056:	f01e 0f10 	tst.w	lr, #16
 800105a:	bf08      	it	eq
 800105c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001060:	f380 8809 	msr	PSP, r0
 8001064:	f3bf 8f6f 	isb	sy
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	f3af 8000 	nop.w

08001070 <pxCurrentTCBConst>:
 8001070:	20000024 	.word	0x20000024

08001074 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001074:	b508      	push	{r3, lr}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800107a:	f383 8811 	msr	BASEPRI, r3
 800107e:	f3bf 8f6f 	isb	sy
 8001082:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001086:	f000 f81d 	bl	80010c4 <xTaskIncrementTick>
 800108a:	b118      	cbz	r0, 8001094 <xPortSysTickHandler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800108c:	4b03      	ldr	r3, [pc, #12]	; (800109c <xPortSysTickHandler+0x28>)
 800108e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001092:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001094:	2300      	movs	r3, #0
 8001096:	f383 8811 	msr	BASEPRI, r3
 800109a:	bd08      	pop	{r3, pc}
 800109c:	e000ed04 	.word	0xe000ed04

080010a0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80010a0:	4a06      	ldr	r2, [pc, #24]	; (80010bc <prvResetNextTaskUnblockTime+0x1c>)
 80010a2:	6813      	ldr	r3, [r2, #0]
 80010a4:	6819      	ldr	r1, [r3, #0]
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <prvResetNextTaskUnblockTime+0x20>)
 80010a8:	b919      	cbnz	r1, 80010b2 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80010aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80010b2:	6812      	ldr	r2, [r2, #0]
 80010b4:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80010b6:	68d2      	ldr	r2, [r2, #12]
 80010b8:	6852      	ldr	r2, [r2, #4]
 80010ba:	e7f8      	b.n	80010ae <prvResetNextTaskUnblockTime+0xe>
 80010bc:	20000028 	.word	0x20000028
 80010c0:	200000c8 	.word	0x200000c8

080010c4 <xTaskIncrementTick>:
{
 80010c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80010c8:	4b3c      	ldr	r3, [pc, #240]	; (80011bc <xTaskIncrementTick+0xf8>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d153      	bne.n	8001178 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 80010d0:	4b3b      	ldr	r3, [pc, #236]	; (80011c0 <xTaskIncrementTick+0xfc>)
 80010d2:	681c      	ldr	r4, [r3, #0]
 80010d4:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 80010d6:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 80010d8:	b9bc      	cbnz	r4, 800110a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80010da:	4b3a      	ldr	r3, [pc, #232]	; (80011c4 <xTaskIncrementTick+0x100>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	6812      	ldr	r2, [r2, #0]
 80010e0:	b142      	cbz	r2, 80010f4 <xTaskIncrementTick+0x30>
	__asm volatile
 80010e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010e6:	f383 8811 	msr	BASEPRI, r3
 80010ea:	f3bf 8f6f 	isb	sy
 80010ee:	f3bf 8f4f 	dsb	sy
 80010f2:	e7fe      	b.n	80010f2 <xTaskIncrementTick+0x2e>
 80010f4:	4a34      	ldr	r2, [pc, #208]	; (80011c8 <xTaskIncrementTick+0x104>)
 80010f6:	6819      	ldr	r1, [r3, #0]
 80010f8:	6810      	ldr	r0, [r2, #0]
 80010fa:	6018      	str	r0, [r3, #0]
 80010fc:	6011      	str	r1, [r2, #0]
 80010fe:	4a33      	ldr	r2, [pc, #204]	; (80011cc <xTaskIncrementTick+0x108>)
 8001100:	6813      	ldr	r3, [r2, #0]
 8001102:	3301      	adds	r3, #1
 8001104:	6013      	str	r3, [r2, #0]
 8001106:	f7ff ffcb 	bl	80010a0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800110a:	4d31      	ldr	r5, [pc, #196]	; (80011d0 <xTaskIncrementTick+0x10c>)
 800110c:	4f31      	ldr	r7, [pc, #196]	; (80011d4 <xTaskIncrementTick+0x110>)
 800110e:	682b      	ldr	r3, [r5, #0]
 8001110:	429c      	cmp	r4, r3
 8001112:	f04f 0b00 	mov.w	fp, #0
 8001116:	d33e      	bcc.n	8001196 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001118:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80011c4 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 800111c:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80011e4 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001120:	f8d8 2000 	ldr.w	r2, [r8]
 8001124:	6812      	ldr	r2, [r2, #0]
 8001126:	bb72      	cbnz	r2, 8001186 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001128:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800112c:	602a      	str	r2, [r5, #0]
					break;
 800112e:	e032      	b.n	8001196 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001130:	f106 0a04 	add.w	sl, r6, #4
 8001134:	4650      	mov	r0, sl
 8001136:	f7ff ff43 	bl	8000fc0 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800113a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800113c:	b119      	cbz	r1, 8001146 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800113e:	f106 0018 	add.w	r0, r6, #24
 8001142:	f7ff ff3d 	bl	8000fc0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001146:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8001148:	f8d9 3000 	ldr.w	r3, [r9]
 800114c:	2201      	movs	r2, #1
 800114e:	fa02 f100 	lsl.w	r1, r2, r0
 8001152:	4319      	orrs	r1, r3
 8001154:	4b20      	ldr	r3, [pc, #128]	; (80011d8 <xTaskIncrementTick+0x114>)
 8001156:	f8c9 1000 	str.w	r1, [r9]
 800115a:	f04f 0e14 	mov.w	lr, #20
 800115e:	4651      	mov	r1, sl
 8001160:	fb0e 3000 	mla	r0, lr, r0, r3
 8001164:	f7ff ff20 	bl	8000fa8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001168:	6838      	ldr	r0, [r7, #0]
 800116a:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800116c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800116e:	4291      	cmp	r1, r2
 8001170:	bf28      	it	cs
 8001172:	f04f 0b01 	movcs.w	fp, #1
 8001176:	e7d3      	b.n	8001120 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8001178:	4a18      	ldr	r2, [pc, #96]	; (80011dc <xTaskIncrementTick+0x118>)
 800117a:	6813      	ldr	r3, [r2, #0]
 800117c:	3301      	adds	r3, #1
 800117e:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8001180:	f04f 0b00 	mov.w	fp, #0
 8001184:	e011      	b.n	80011aa <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001186:	f8d8 2000 	ldr.w	r2, [r8]
 800118a:	68d2      	ldr	r2, [r2, #12]
 800118c:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800118e:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8001190:	428c      	cmp	r4, r1
 8001192:	d2cd      	bcs.n	8001130 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8001194:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001196:	683a      	ldr	r2, [r7, #0]
 8001198:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <xTaskIncrementTick+0x114>)
 800119a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800119c:	2214      	movs	r2, #20
 800119e:	434a      	muls	r2, r1
 80011a0:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 80011a2:	2a02      	cmp	r2, #2
 80011a4:	bf28      	it	cs
 80011a6:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80011aa:	4a0d      	ldr	r2, [pc, #52]	; (80011e0 <xTaskIncrementTick+0x11c>)
 80011ac:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80011ae:	2a00      	cmp	r2, #0
 80011b0:	bf18      	it	ne
 80011b2:	f04f 0b01 	movne.w	fp, #1
}
 80011b6:	4658      	mov	r0, fp
 80011b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011bc:	200000c0 	.word	0x200000c0
 80011c0:	200000d4 	.word	0x200000d4
 80011c4:	20000028 	.word	0x20000028
 80011c8:	2000002c 	.word	0x2000002c
 80011cc:	200000cc 	.word	0x200000cc
 80011d0:	200000c8 	.word	0x200000c8
 80011d4:	20000024 	.word	0x20000024
 80011d8:	20000030 	.word	0x20000030
 80011dc:	200000bc 	.word	0x200000bc
 80011e0:	200000d8 	.word	0x200000d8
 80011e4:	200000c4 	.word	0x200000c4

080011e8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80011e8:	4b17      	ldr	r3, [pc, #92]	; (8001248 <vTaskSwitchContext+0x60>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	4b17      	ldr	r3, [pc, #92]	; (800124c <vTaskSwitchContext+0x64>)
{
 80011ee:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80011f0:	b112      	cbz	r2, 80011f8 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80011f2:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80011f8:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80011fa:	4b15      	ldr	r3, [pc, #84]	; (8001250 <vTaskSwitchContext+0x68>)
 80011fc:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80011fe:	fab3 f383 	clz	r3, r3
 8001202:	b2db      	uxtb	r3, r3
 8001204:	f1c3 031f 	rsb	r3, r3, #31
 8001208:	2214      	movs	r2, #20
 800120a:	4912      	ldr	r1, [pc, #72]	; (8001254 <vTaskSwitchContext+0x6c>)
 800120c:	435a      	muls	r2, r3
 800120e:	1888      	adds	r0, r1, r2
 8001210:	588c      	ldr	r4, [r1, r2]
 8001212:	b944      	cbnz	r4, 8001226 <vTaskSwitchContext+0x3e>
	__asm volatile
 8001214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001218:	f383 8811 	msr	BASEPRI, r3
 800121c:	f3bf 8f6f 	isb	sy
 8001220:	f3bf 8f4f 	dsb	sy
 8001224:	e7fe      	b.n	8001224 <vTaskSwitchContext+0x3c>
 8001226:	6844      	ldr	r4, [r0, #4]
 8001228:	3208      	adds	r2, #8
 800122a:	6864      	ldr	r4, [r4, #4]
 800122c:	6044      	str	r4, [r0, #4]
 800122e:	440a      	add	r2, r1
 8001230:	4294      	cmp	r4, r2
 8001232:	bf04      	itt	eq
 8001234:	6862      	ldreq	r2, [r4, #4]
 8001236:	6042      	streq	r2, [r0, #4]
 8001238:	2214      	movs	r2, #20
 800123a:	fb02 1303 	mla	r3, r2, r3, r1
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	68da      	ldr	r2, [r3, #12]
 8001242:	4b05      	ldr	r3, [pc, #20]	; (8001258 <vTaskSwitchContext+0x70>)
 8001244:	e7d6      	b.n	80011f4 <vTaskSwitchContext+0xc>
 8001246:	bf00      	nop
 8001248:	200000c0 	.word	0x200000c0
 800124c:	200000d8 	.word	0x200000d8
 8001250:	200000c4 	.word	0x200000c4
 8001254:	20000030 	.word	0x20000030
 8001258:	20000024 	.word	0x20000024

0800125c <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800125c:	4b05      	ldr	r3, [pc, #20]	; (8001274 <xTaskGetSchedulerState+0x18>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	b133      	cbz	r3, 8001270 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001262:	4b05      	ldr	r3, [pc, #20]	; (8001278 <xTaskGetSchedulerState+0x1c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2b00      	cmp	r3, #0
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8001268:	bf0c      	ite	eq
 800126a:	2002      	moveq	r0, #2
 800126c:	2000      	movne	r0, #0
 800126e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001270:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
 8001272:	4770      	bx	lr
 8001274:	200000d0 	.word	0x200000d0
 8001278:	200000c0 	.word	0x200000c0

0800127c <DWT_Delay_Init>:
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800127c:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <DWT_Delay_Init+0x38>)
 800127e:	68da      	ldr	r2, [r3, #12]
 8001280:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001284:	60da      	str	r2, [r3, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001286:	68da      	ldr	r2, [r3, #12]
 8001288:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800128c:	60da      	str	r2, [r3, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800128e:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <DWT_Delay_Init+0x3c>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	f022 0201 	bic.w	r2, r2, #1
 8001296:	601a      	str	r2, [r3, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	f042 0201 	orr.w	r2, r2, #1
 800129e:	601a      	str	r2, [r3, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 80012a0:	2200      	movs	r2, #0
 80012a2:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
  	 asm("NOP");
 80012a4:	bf00      	nop
  	 asm("NOP");
 80012a6:	bf00      	nop
  	 asm("NOP");
 80012a8:	bf00      	nop


  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 80012aa:	6858      	ldr	r0, [r3, #4]
     }
     else
  {
    return 1; /*clock cycle counter not started*/
  }
}
 80012ac:	fab0 f080 	clz	r0, r0
 80012b0:	0940      	lsrs	r0, r0, #5
 80012b2:	4770      	bx	lr
 80012b4:	e000edf0 	.word	0xe000edf0
 80012b8:	e0001000 	.word	0xe0001000

080012bc <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 80012bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012c0:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c2:	4b35      	ldr	r3, [pc, #212]	; (8001398 <MX_GPIO_Init+0xdc>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_EN_Pin|MOTOR_STEP_Pin|MOTOR_DIR_Pin, GPIO_PIN_RESET);
 80012c4:	4e35      	ldr	r6, [pc, #212]	; (800139c <MX_GPIO_Init+0xe0>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 80012c6:	4f36      	ldr	r7, [pc, #216]	; (80013a0 <MX_GPIO_Init+0xe4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c8:	2400      	movs	r4, #0
 80012ca:	9401      	str	r4, [sp, #4]
 80012cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012ce:	f042 0204 	orr.w	r2, r2, #4
 80012d2:	631a      	str	r2, [r3, #48]	; 0x30
 80012d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012d6:	f002 0204 	and.w	r2, r2, #4
 80012da:	9201      	str	r2, [sp, #4]
 80012dc:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012de:	9402      	str	r4, [sp, #8]
 80012e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012e6:	631a      	str	r2, [r3, #48]	; 0x30
 80012e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012ea:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80012ee:	9202      	str	r2, [sp, #8]
 80012f0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f2:	9403      	str	r4, [sp, #12]
 80012f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012f6:	f042 0201 	orr.w	r2, r2, #1
 80012fa:	631a      	str	r2, [r3, #48]	; 0x30
 80012fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012fe:	f002 0201 	and.w	r2, r2, #1
 8001302:	9203      	str	r2, [sp, #12]
 8001304:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001306:	9404      	str	r4, [sp, #16]
 8001308:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800130a:	f042 0202 	orr.w	r2, r2, #2
 800130e:	631a      	str	r2, [r3, #48]	; 0x30
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, MOTOR_EN_Pin|MOTOR_STEP_Pin|MOTOR_DIR_Pin, GPIO_PIN_RESET);
 8001318:	4622      	mov	r2, r4
 800131a:	4630      	mov	r0, r6
 800131c:	f44f 7144 	mov.w	r1, #784	; 0x310
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001320:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, MOTOR_EN_Pin|MOTOR_STEP_Pin|MOTOR_DIR_Pin, GPIO_PIN_RESET);
 8001322:	f7ff fa5b 	bl	80007dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8001326:	2201      	movs	r2, #1
 8001328:	4638      	mov	r0, r7
 800132a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800132e:	f7ff fa55 	bl	80007dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001332:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001336:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001338:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800133a:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <MX_GPIO_Init+0xe8>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800133c:	481a      	ldr	r0, [pc, #104]	; (80013a8 <MX_GPIO_Init+0xec>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800133e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001342:	f7ff f975 	bl	8000630 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001346:	230c      	movs	r3, #12
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001348:	2502      	movs	r5, #2
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800134a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800134e:	2307      	movs	r3, #7
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001350:	4630      	mov	r0, r6
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001352:	9309      	str	r3, [sp, #36]	; 0x24

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MOTOR_EN_Pin|MOTOR_STEP_Pin|MOTOR_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001354:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001358:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135e:	f7ff f967 	bl	8000630 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MOTOR_EN_Pin|MOTOR_STEP_Pin|MOTOR_DIR_Pin;
 8001362:	f44f 7344 	mov.w	r3, #784	; 0x310
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001366:	a905      	add	r1, sp, #20
 8001368:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = MOTOR_EN_Pin|MOTOR_STEP_Pin|MOTOR_DIR_Pin;
 800136a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136c:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001372:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001374:	f7ff f95c 	bl	8000630 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 8001378:	f44f 7300 	mov.w	r3, #512	; 0x200
 800137c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 800137e:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001380:	2311      	movs	r3, #17
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 8001382:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001384:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001386:	f8cd 801c 	str.w	r8, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800138a:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 800138c:	f7ff f950 	bl	8000630 <HAL_GPIO_Init>

}
 8001390:	b00a      	add	sp, #40	; 0x28
 8001392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001396:	bf00      	nop
 8001398:	40023800 	.word	0x40023800
 800139c:	40020000 	.word	0x40020000
 80013a0:	40020400 	.word	0x40020400
 80013a4:	10210000 	.word	0x10210000
 80013a8:	40020800 	.word	0x40020800

080013ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013ac:	b570      	push	{r4, r5, r6, lr}
 80013ae:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b0:	2200      	movs	r2, #0
 80013b2:	4b27      	ldr	r3, [pc, #156]	; (8001450 <SystemClock_Config+0xa4>)
 80013b4:	9201      	str	r2, [sp, #4]
 80013b6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80013b8:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80013bc:	6419      	str	r1, [r3, #64]	; 0x40
 80013be:	6c1b      	ldr	r3, [r3, #64]	; 0x40

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80013c0:	4924      	ldr	r1, [pc, #144]	; (8001454 <SystemClock_Config+0xa8>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c6:	9301      	str	r3, [sp, #4]
 80013c8:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80013ca:	9202      	str	r2, [sp, #8]
 80013cc:	680b      	ldr	r3, [r1, #0]
 80013ce:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013d6:	600b      	str	r3, [r1, #0]
 80013d8:	680b      	ldr	r3, [r1, #0]
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013da:	920f      	str	r2, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80013dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013e0:	9302      	str	r3, [sp, #8]
 80013e2:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013e4:	2301      	movs	r3, #1
 80013e6:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80013e8:	2310      	movs	r3, #16
 80013ea:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 16;
 80013ec:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013ee:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013f2:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013f4:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80013f6:	2604      	movs	r6, #4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80013f8:	2307      	movs	r3, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013fa:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013fc:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013fe:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001400:	9612      	str	r6, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001402:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001404:	f7ff f9f0 	bl	80007e8 <HAL_RCC_OscConfig>
 8001408:	b100      	cbz	r0, 800140c <SystemClock_Config+0x60>
 800140a:	e7fe      	b.n	800140a <SystemClock_Config+0x5e>
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800140c:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800140e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001412:	9007      	str	r0, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001414:	4621      	mov	r1, r4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001416:	250f      	movs	r5, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001418:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800141a:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800141c:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800141e:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001420:	f7ff fb92 	bl	8000b48 <HAL_RCC_ClockConfig>
 8001424:	4604      	mov	r4, r0
 8001426:	b100      	cbz	r0, 800142a <SystemClock_Config+0x7e>
 8001428:	e7fe      	b.n	8001428 <SystemClock_Config+0x7c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800142a:	f7ff fc27 	bl	8000c7c <HAL_RCC_GetHCLKFreq>
 800142e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001432:	fbb0 f0f3 	udiv	r0, r0, r3
 8001436:	f7ff f8d9 	bl	80005ec <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800143a:	4630      	mov	r0, r6
 800143c:	f7ff f8ec 	bl	8000618 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8001440:	4622      	mov	r2, r4
 8001442:	4629      	mov	r1, r5
 8001444:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001448:	f7ff f890 	bl	800056c <HAL_NVIC_SetPriority>
}
 800144c:	b014      	add	sp, #80	; 0x50
 800144e:	bd70      	pop	{r4, r5, r6, pc}
 8001450:	40023800 	.word	0x40023800
 8001454:	40007000 	.word	0x40007000

08001458 <main>:
{
 8001458:	b510      	push	{r4, lr}
  HAL_Init();
 800145a:	f7ff f849 	bl	80004f0 <HAL_Init>
  SystemClock_Config();
 800145e:	f7ff ffa5 	bl	80013ac <SystemClock_Config>
  MX_GPIO_Init();
 8001462:	f7ff ff2b 	bl	80012bc <MX_GPIO_Init>
  MX_SPI1_Init();
 8001466:	f000 f86d 	bl	8001544 <MX_SPI1_Init>
  enable_motor_driver();
 800146a:	f000 f839 	bl	80014e0 <enable_motor_driver>
  set_motor_dir(1);
 800146e:	2001      	movs	r0, #1
 8001470:	f000 f83e 	bl	80014f0 <set_motor_dir>
  uint32_t result = DWT_Delay_Init();
 8001474:	f7ff ff02 	bl	800127c <DWT_Delay_Init>
  if(0 != result) {
 8001478:	b100      	cbz	r0, 800147c <main+0x24>
	  asm("NOP");	//error
 800147a:	bf00      	nop
 800147c:	2401      	movs	r4, #1
	set_motor_dir(dir);
 800147e:	4620      	mov	r0, r4
 8001480:	f000 f836 	bl	80014f0 <set_motor_dir>
	send_motor_steps(1000, 3000);
 8001484:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8001488:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800148c:	f000 f83c 	bl	8001508 <send_motor_steps>
		dir = 0;
 8001490:	f084 0401 	eor.w	r4, r4, #1
 8001494:	e7f3      	b.n	800147e <main+0x26>
	...

08001498 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001498:	6802      	ldr	r2, [r0, #0]
 800149a:	4b03      	ldr	r3, [pc, #12]	; (80014a8 <HAL_TIM_PeriodElapsedCallback+0x10>)
 800149c:	429a      	cmp	r2, r3
 800149e:	d101      	bne.n	80014a4 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80014a0:	f7ff b840 	b.w	8000524 <HAL_IncTick>
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	40010000 	.word	0x40010000

080014ac <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80014ac:	e7fe      	b.n	80014ac <_Error_Handler>
	...

080014b0 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 80014b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80014b2:	4c09      	ldr	r4, [pc, #36]	; (80014d8 <DWT_Delay_us+0x28>)
{
 80014b4:	9001      	str	r0, [sp, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80014b6:	6865      	ldr	r5, [r4, #4]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80014b8:	f7ff fbe0 	bl	8000c7c <HAL_RCC_GetHCLKFreq>
 80014bc:	9b01      	ldr	r3, [sp, #4]
 80014be:	4a07      	ldr	r2, [pc, #28]	; (80014dc <DWT_Delay_us+0x2c>)
 80014c0:	fbb0 f0f2 	udiv	r0, r0, r2
 80014c4:	4343      	muls	r3, r0
 80014c6:	9301      	str	r3, [sp, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80014c8:	6863      	ldr	r3, [r4, #4]
 80014ca:	9a01      	ldr	r2, [sp, #4]
 80014cc:	1b5b      	subs	r3, r3, r5
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d3fa      	bcc.n	80014c8 <DWT_Delay_us+0x18>
}
 80014d2:	b003      	add	sp, #12
 80014d4:	bd30      	pop	{r4, r5, pc}
 80014d6:	bf00      	nop
 80014d8:	e0001000 	.word	0xe0001000
 80014dc:	000f4240 	.word	0x000f4240

080014e0 <enable_motor_driver>:
#include "main.h"
#include "motorcontrol.h"
#include "dwt_stm32_delay.h"

void enable_motor_driver(void) {
	HAL_GPIO_WritePin(MOTOR_EN_GPIO_Port, MOTOR_EN_Pin, GPIO_PIN_SET);
 80014e0:	2201      	movs	r2, #1
 80014e2:	2110      	movs	r1, #16
 80014e4:	4801      	ldr	r0, [pc, #4]	; (80014ec <enable_motor_driver+0xc>)
 80014e6:	f7ff b979 	b.w	80007dc <HAL_GPIO_WritePin>
 80014ea:	bf00      	nop
 80014ec:	40020000 	.word	0x40020000

080014f0 <set_motor_dir>:
	HAL_GPIO_WritePin(MOTOR_EN_GPIO_Port, MOTOR_EN_Pin, GPIO_PIN_RESET);
}


void set_motor_dir(uint8_t motor_dir) {
	if(motor_dir == 0) {
 80014f0:	4602      	mov	r2, r0
 80014f2:	b920      	cbnz	r0, 80014fe <set_motor_dir+0xe>
		HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, GPIO_PIN_RESET);
	} else {
		HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, GPIO_PIN_SET);
 80014f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014f8:	4802      	ldr	r0, [pc, #8]	; (8001504 <set_motor_dir+0x14>)
 80014fa:	f7ff b96f 	b.w	80007dc <HAL_GPIO_WritePin>
 80014fe:	2201      	movs	r2, #1
 8001500:	e7f8      	b.n	80014f4 <set_motor_dir+0x4>
 8001502:	bf00      	nop
 8001504:	40020000 	.word	0x40020000

08001508 <send_motor_steps>:
	}
}

void send_motor_steps(uint32_t step_count, uint32_t delay_in_us) {
 8001508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	for (uint32_t step = 0; step < step_count; step++) {
		HAL_GPIO_WritePin(MOTOR_STEP_GPIO_Port, MOTOR_STEP_Pin, GPIO_PIN_SET);
 800150a:	4e0d      	ldr	r6, [pc, #52]	; (8001540 <send_motor_steps+0x38>)
void send_motor_steps(uint32_t step_count, uint32_t delay_in_us) {
 800150c:	4607      	mov	r7, r0
 800150e:	460d      	mov	r5, r1
	for (uint32_t step = 0; step < step_count; step++) {
 8001510:	2400      	movs	r4, #0
 8001512:	42bc      	cmp	r4, r7
 8001514:	d100      	bne.n	8001518 <send_motor_steps+0x10>
		DWT_Delay_us(delay_in_us);
		HAL_GPIO_WritePin(MOTOR_STEP_GPIO_Port, MOTOR_STEP_Pin, GPIO_PIN_RESET);
		DWT_Delay_us(delay_in_us);
	}
}
 8001516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		HAL_GPIO_WritePin(MOTOR_STEP_GPIO_Port, MOTOR_STEP_Pin, GPIO_PIN_SET);
 8001518:	2201      	movs	r2, #1
 800151a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800151e:	4630      	mov	r0, r6
 8001520:	f7ff f95c 	bl	80007dc <HAL_GPIO_WritePin>
		DWT_Delay_us(delay_in_us);
 8001524:	4628      	mov	r0, r5
 8001526:	f7ff ffc3 	bl	80014b0 <DWT_Delay_us>
		HAL_GPIO_WritePin(MOTOR_STEP_GPIO_Port, MOTOR_STEP_Pin, GPIO_PIN_RESET);
 800152a:	2200      	movs	r2, #0
 800152c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001530:	4630      	mov	r0, r6
 8001532:	f7ff f953 	bl	80007dc <HAL_GPIO_WritePin>
		DWT_Delay_us(delay_in_us);
 8001536:	4628      	mov	r0, r5
 8001538:	f7ff ffba 	bl	80014b0 <DWT_Delay_us>
	for (uint32_t step = 0; step < step_count; step++) {
 800153c:	3401      	adds	r4, #1
 800153e:	e7e8      	b.n	8001512 <send_motor_steps+0xa>
 8001540:	40020000 	.word	0x40020000

08001544 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001544:	b508      	push	{r3, lr}

  hspi1.Instance = SPI1;
 8001546:	480f      	ldr	r0, [pc, #60]	; (8001584 <MX_SPI1_Init+0x40>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001548:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <MX_SPI1_Init+0x44>)
 800154a:	f44f 7e82 	mov.w	lr, #260	; 0x104
 800154e:	e880 4008 	stmia.w	r0, {r3, lr}
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001552:	2300      	movs	r3, #0
 8001554:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001556:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001558:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800155a:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800155c:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001560:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001562:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001564:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001566:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001568:	230a      	movs	r3, #10
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800156a:	6182      	str	r2, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 800156c:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800156e:	f7ff fbb9 	bl	8000ce4 <HAL_SPI_Init>
 8001572:	b128      	cbz	r0, 8001580 <MX_SPI1_Init+0x3c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001574:	214f      	movs	r1, #79	; 0x4f
 8001576:	4805      	ldr	r0, [pc, #20]	; (800158c <MX_SPI1_Init+0x48>)
  }

}
 8001578:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 800157c:	f7ff bf96 	b.w	80014ac <_Error_Handler>
 8001580:	bd08      	pop	{r3, pc}
 8001582:	bf00      	nop
 8001584:	200000e0 	.word	0x200000e0
 8001588:	40013000 	.word	0x40013000
 800158c:	080017c4 	.word	0x080017c4

08001590 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001590:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 8001592:	6802      	ldr	r2, [r0, #0]
 8001594:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <HAL_SPI_MspInit+0x44>)
 8001596:	429a      	cmp	r2, r3
 8001598:	d119      	bne.n	80015ce <HAL_SPI_MspInit+0x3e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800159a:	2100      	movs	r1, #0
 800159c:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 80015a0:	9100      	str	r1, [sp, #0]
 80015a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a4:	480c      	ldr	r0, [pc, #48]	; (80015d8 <HAL_SPI_MspInit+0x48>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80015aa:	645a      	str	r2, [r3, #68]	; 0x44
 80015ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	9103      	str	r1, [sp, #12]
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80015b8:	23e0      	movs	r3, #224	; 0xe0
 80015ba:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015bc:	2302      	movs	r3, #2
 80015be:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c0:	2303      	movs	r3, #3
 80015c2:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c4:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015c6:	2305      	movs	r3, #5
 80015c8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ca:	f7ff f831 	bl	8000630 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80015ce:	b007      	add	sp, #28
 80015d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80015d4:	40013000 	.word	0x40013000
 80015d8:	40020000 	.word	0x40020000

080015dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015de:	2003      	movs	r0, #3
 80015e0:	f7fe ffb2 	bl	8000548 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80015e4:	2200      	movs	r2, #0
 80015e6:	4611      	mov	r1, r2
 80015e8:	f06f 000b 	mvn.w	r0, #11
 80015ec:	f7fe ffbe 	bl	800056c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80015f0:	2200      	movs	r2, #0
 80015f2:	4611      	mov	r1, r2
 80015f4:	f06f 000a 	mvn.w	r0, #10
 80015f8:	f7fe ffb8 	bl	800056c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80015fc:	2200      	movs	r2, #0
 80015fe:	4611      	mov	r1, r2
 8001600:	f06f 0009 	mvn.w	r0, #9
 8001604:	f7fe ffb2 	bl	800056c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001608:	2200      	movs	r2, #0
 800160a:	4611      	mov	r1, r2
 800160c:	f06f 0004 	mvn.w	r0, #4
 8001610:	f7fe ffac 	bl	800056c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001614:	2200      	movs	r2, #0
 8001616:	4611      	mov	r1, r2
 8001618:	f06f 0003 	mvn.w	r0, #3
 800161c:	f7fe ffa6 	bl	800056c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001620:	2200      	movs	r2, #0
 8001622:	210f      	movs	r1, #15
 8001624:	f06f 0001 	mvn.w	r0, #1
 8001628:	f7fe ffa0 	bl	800056c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800162c:	2200      	movs	r2, #0
 800162e:	210f      	movs	r1, #15
 8001630:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001634:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8001638:	f7fe bf98 	b.w	800056c <HAL_NVIC_SetPriority>

0800163c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800163c:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800163e:	4601      	mov	r1, r0
{
 8001640:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8001642:	2200      	movs	r2, #0
 8001644:	2019      	movs	r0, #25
 8001646:	f7fe ff91 	bl	800056c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800164a:	2019      	movs	r0, #25
 800164c:	f7fe ffc2 	bl	80005d4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001650:	2500      	movs	r5, #0
 8001652:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <HAL_InitTick+0x68>)
 8001654:	9502      	str	r5, [sp, #8]
 8001656:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001658:	4c13      	ldr	r4, [pc, #76]	; (80016a8 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 800165a:	f042 0201 	orr.w	r2, r2, #1
 800165e:	645a      	str	r2, [r3, #68]	; 0x44
 8001660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001668:	a901      	add	r1, sp, #4
 800166a:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 800166c:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800166e:	f7ff fb1b 	bl	8000ca8 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001672:	f7ff fb09 	bl	8000c88 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 8001676:	4b0d      	ldr	r3, [pc, #52]	; (80016ac <HAL_InitTick+0x70>)
 8001678:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800167a:	f240 33e7 	movw	r3, #999	; 0x3e7
 800167e:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001680:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <HAL_InitTick+0x74>)
 8001682:	fbb0 f0f3 	udiv	r0, r0, r3
 8001686:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8001688:	6060      	str	r0, [r4, #4]
  htim1.Init.ClockDivision = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800168a:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 800168c:	6125      	str	r5, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800168e:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001690:	f7ff fc64 	bl	8000f5c <HAL_TIM_Base_Init>
 8001694:	b920      	cbnz	r0, 80016a0 <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001696:	4620      	mov	r0, r4
 8001698:	f7ff fb62 	bl	8000d60 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 800169c:	b009      	add	sp, #36	; 0x24
 800169e:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 80016a0:	2001      	movs	r0, #1
 80016a2:	e7fb      	b.n	800169c <HAL_InitTick+0x60>
 80016a4:	40023800 	.word	0x40023800
 80016a8:	20000138 	.word	0x20000138
 80016ac:	40010000 	.word	0x40010000
 80016b0:	000f4240 	.word	0x000f4240

080016b4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 80016b4:	f7ff bc6e 	b.w	8000f94 <osSystickHandler>

080016b8 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016b8:	4801      	ldr	r0, [pc, #4]	; (80016c0 <TIM1_UP_TIM10_IRQHandler+0x8>)
 80016ba:	f7ff bb60 	b.w	8000d7e <HAL_TIM_IRQHandler>
 80016be:	bf00      	nop
 80016c0:	20000138 	.word	0x20000138

080016c4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016c4:	490f      	ldr	r1, [pc, #60]	; (8001704 <SystemInit+0x40>)
 80016c6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80016ca:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80016d2:	4b0d      	ldr	r3, [pc, #52]	; (8001708 <SystemInit+0x44>)
 80016d4:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80016d6:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80016d8:	f042 0201 	orr.w	r2, r2, #1
 80016dc:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80016de:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80016e6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80016ea:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80016ec:	4a07      	ldr	r2, [pc, #28]	; (800170c <SystemInit+0x48>)
 80016ee:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80016f6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80016f8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016fa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80016fe:	608b      	str	r3, [r1, #8]
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	e000ed00 	.word	0xe000ed00
 8001708:	40023800 	.word	0x40023800
 800170c:	24003010 	.word	0x24003010

08001710 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001710:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001748 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001714:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001716:	e003      	b.n	8001720 <LoopCopyDataInit>

08001718 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001718:	4b0c      	ldr	r3, [pc, #48]	; (800174c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800171a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800171c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800171e:	3104      	adds	r1, #4

08001720 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001720:	480b      	ldr	r0, [pc, #44]	; (8001750 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001722:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001724:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001726:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001728:	d3f6      	bcc.n	8001718 <CopyDataInit>
  ldr  r2, =_sbss
 800172a:	4a0b      	ldr	r2, [pc, #44]	; (8001758 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800172c:	e002      	b.n	8001734 <LoopFillZerobss>

0800172e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800172e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001730:	f842 3b04 	str.w	r3, [r2], #4

08001734 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001734:	4b09      	ldr	r3, [pc, #36]	; (800175c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001736:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001738:	d3f9      	bcc.n	800172e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800173a:	f7ff ffc3 	bl	80016c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800173e:	f000 f811 	bl	8001764 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001742:	f7ff fe89 	bl	8001458 <main>
  bx  lr    
 8001746:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001748:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 800174c:	080017fc 	.word	0x080017fc
  ldr  r0, =_sdata
 8001750:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001754:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 8001758:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 800175c:	20000174 	.word	0x20000174

08001760 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001760:	e7fe      	b.n	8001760 <ADC_IRQHandler>
	...

08001764 <__libc_init_array>:
 8001764:	b570      	push	{r4, r5, r6, lr}
 8001766:	4e0d      	ldr	r6, [pc, #52]	; (800179c <__libc_init_array+0x38>)
 8001768:	4c0d      	ldr	r4, [pc, #52]	; (80017a0 <__libc_init_array+0x3c>)
 800176a:	1ba4      	subs	r4, r4, r6
 800176c:	10a4      	asrs	r4, r4, #2
 800176e:	2500      	movs	r5, #0
 8001770:	42a5      	cmp	r5, r4
 8001772:	d109      	bne.n	8001788 <__libc_init_array+0x24>
 8001774:	4e0b      	ldr	r6, [pc, #44]	; (80017a4 <__libc_init_array+0x40>)
 8001776:	4c0c      	ldr	r4, [pc, #48]	; (80017a8 <__libc_init_array+0x44>)
 8001778:	f000 f818 	bl	80017ac <_init>
 800177c:	1ba4      	subs	r4, r4, r6
 800177e:	10a4      	asrs	r4, r4, #2
 8001780:	2500      	movs	r5, #0
 8001782:	42a5      	cmp	r5, r4
 8001784:	d105      	bne.n	8001792 <__libc_init_array+0x2e>
 8001786:	bd70      	pop	{r4, r5, r6, pc}
 8001788:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800178c:	4798      	blx	r3
 800178e:	3501      	adds	r5, #1
 8001790:	e7ee      	b.n	8001770 <__libc_init_array+0xc>
 8001792:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001796:	4798      	blx	r3
 8001798:	3501      	adds	r5, #1
 800179a:	e7f2      	b.n	8001782 <__libc_init_array+0x1e>
 800179c:	080017f4 	.word	0x080017f4
 80017a0:	080017f4 	.word	0x080017f4
 80017a4:	080017f4 	.word	0x080017f4
 80017a8:	080017f8 	.word	0x080017f8

080017ac <_init>:
 80017ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ae:	bf00      	nop
 80017b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017b2:	bc08      	pop	{r3}
 80017b4:	469e      	mov	lr, r3
 80017b6:	4770      	bx	lr

080017b8 <_fini>:
 80017b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ba:	bf00      	nop
 80017bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017be:	bc08      	pop	{r3}
 80017c0:	469e      	mov	lr, r3
 80017c2:	4770      	bx	lr
